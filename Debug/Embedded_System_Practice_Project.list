
Embedded_System_Practice_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006248  08006248  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08006250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200000bc  0800630c  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800630c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ba  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263e  00000000  00000000  00032aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000350e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185e4  00000000  00000000  00036d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001169b  00000000  00000000  0004f374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961de  00000000  00000000  00060a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c4  00000000  00000000  000f6c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060c8 	.word	0x080060c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	080060c8 	.word	0x080060c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <delay_us>:
*******************************************/
extern TIM_HandleTypeDef htim1;
#define DLY_TIM_Handle  (&htim1)

static void delay_us(uint32_t nus)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(DLY_TIM_Handle, 0);
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <delay_us+0x6c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_ENABLE(DLY_TIM_Handle);
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <delay_us+0x6c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <delay_us+0x6c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f042 0201 	orr.w	r2, r2, #1
 8000596:	601a      	str	r2, [r3, #0]
	while (__HAL_TIM_GET_COUNTER(DLY_TIM_Handle) < nus)
 8000598:	bf00      	nop
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <delay_us+0x6c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d8f9      	bhi.n	800059a <delay_us+0x22>
	{
	}
	__HAL_TIM_DISABLE(DLY_TIM_Handle);
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <delay_us+0x6c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	6a1a      	ldr	r2, [r3, #32]
 80005ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80005b0:	4013      	ands	r3, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d10f      	bne.n	80005d6 <delay_us+0x5e>
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <delay_us+0x6c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6a1a      	ldr	r2, [r3, #32]
 80005bc:	f240 4344 	movw	r3, #1092	; 0x444
 80005c0:	4013      	ands	r3, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d107      	bne.n	80005d6 <delay_us+0x5e>
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <delay_us+0x6c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <delay_us+0x6c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f022 0201 	bic.w	r2, r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200001e0 	.word	0x200001e0

080005e8 <DHT11_Mode_OUT_PP>:

/**
	* @brief DHT11 输出模式
	*/
static void DHT11_Mode_OUT_PP(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = DHT11_PIN;
 80005ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
	
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <DHT11_Mode_OUT_PP+0x28>)
 8000602:	f002 f861 	bl	80026c8 <HAL_GPIO_Init>
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020400 	.word	0x40020400

08000614 <DHT11_Mode_IN_NP>:
 
/**
	* @brief DHT11 输入模式
	*/
static void DHT11_Mode_IN_NP(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = DHT11_PIN;
 800061a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <DHT11_Mode_IN_NP+0x28>)
 800062e:	f002 f84b 	bl	80026c8 <HAL_GPIO_Init>
}
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400

08000640 <DHT11_ReadByte>:
 
/**
	* @brief DHT11 读取字节
	*/
uint8_t DHT11_ReadByte(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	uint8_t i, temp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	71bb      	strb	r3, [r7, #6]
 
	for (i = 0; i < 8; i++)
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e036      	b.n	80006be <DHT11_ReadByte+0x7e>
	{
		while (DHT11_IN == 0);		// 等待低电平结束
 8000650:	bf00      	nop
 8000652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000656:	481e      	ldr	r0, [pc, #120]	; (80006d0 <DHT11_ReadByte+0x90>)
 8000658:	f002 f9ba 	bl	80029d0 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0f7      	beq.n	8000652 <DHT11_ReadByte+0x12>
		
		delay_us(40);					//	延时 40 微秒		低电平为 0 ，高电平为 1
 8000662:	2028      	movs	r0, #40	; 0x28
 8000664:	f7ff ff88 	bl	8000578 <delay_us>
		//for(int count = 0;count<=187*4*40/1000;count ++){}
		if (DHT11_IN == 1)
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4818      	ldr	r0, [pc, #96]	; (80006d0 <DHT11_ReadByte+0x90>)
 800066e:	f002 f9af 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d113      	bne.n	80006a0 <DHT11_ReadByte+0x60>
		{
			while (DHT11_IN == 1);	// 等待高电平结束
 8000678:	bf00      	nop
 800067a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067e:	4814      	ldr	r0, [pc, #80]	; (80006d0 <DHT11_ReadByte+0x90>)
 8000680:	f002 f9a6 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d0f7      	beq.n	800067a <DHT11_ReadByte+0x3a>
			
			temp |= (uint8_t)(0X01 << (7 - i));			// 先发送高位 MSB
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	f1c3 0307 	rsb	r3, r3, #7
 8000690:	2201      	movs	r2, #1
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	b2da      	uxtb	r2, r3
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	4313      	orrs	r3, r2
 800069c:	71bb      	strb	r3, [r7, #6]
 800069e:	e00b      	b.n	80006b8 <DHT11_ReadByte+0x78>
		}
		else
		{
			temp &= (uint8_t)~(0X01 << (7 - i));
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f1c3 0307 	rsb	r3, r3, #7
 80006a6:	2201      	movs	r2, #1
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	43db      	mvns	r3, r3
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	4013      	ands	r3, r2
 80006b6:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++)
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3301      	adds	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	d9c5      	bls.n	8000650 <DHT11_ReadByte+0x10>
		}
	}
	return temp;
 80006c4:	79bb      	ldrb	r3, [r7, #6]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020400 	.word	0x40020400

080006d4 <DHT11_ReadData>:
 
/**
	* @brief DHT11 读取一次数据
	*/
uint8_t DHT11_ReadData(DHT11_Data_TypeDef *DHT11_Data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	DHT11_Mode_OUT_PP();		// 主机输出，主机拉低
 80006dc:	f7ff ff84 	bl	80005e8 <DHT11_Mode_OUT_PP>
	DHT11_OUT_0;	
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4835      	ldr	r0, [pc, #212]	; (80007bc <DHT11_ReadData+0xe8>)
 80006e8:	f002 f98a 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_Delay(12);					// 延时 18 ms
 80006ec:	200c      	movs	r0, #12
 80006ee:	f001 fe23 	bl	8002338 <HAL_Delay>
	//for(int count = 0;count<=187*10*18;count ++){}
	
	DHT11_OUT_1;						// 主机拉高，延时 30 us
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	4830      	ldr	r0, [pc, #192]	; (80007bc <DHT11_ReadData+0xe8>)
 80006fa:	f002 f981 	bl	8002a00 <HAL_GPIO_WritePin>
	delay_us(13);
 80006fe:	200d      	movs	r0, #13
 8000700:	f7ff ff3a 	bl	8000578 <delay_us>
	//for(int count = 0;count<=187*4*30/1000;count ++){}
 
	DHT11_Mode_IN_NP();			// 主机输入，获取 DHT11 数据
 8000704:	f7ff ff86 	bl	8000614 <DHT11_Mode_IN_NP>
	
	if (DHT11_IN == 0)			// 收到从机应答
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	482b      	ldr	r0, [pc, #172]	; (80007bc <DHT11_ReadData+0xe8>)
 800070e:	f002 f95f 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14c      	bne.n	80007b2 <DHT11_ReadData+0xde>
	{
		while (DHT11_IN == 0);		// 等待从机应答的低电平结束
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4827      	ldr	r0, [pc, #156]	; (80007bc <DHT11_ReadData+0xe8>)
 8000720:	f002 f956 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0f7      	beq.n	800071a <DHT11_ReadData+0x46>
		
		while (DHT11_IN == 1);		// 等待从机应答的高电平结束
 800072a:	bf00      	nop
 800072c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000730:	4822      	ldr	r0, [pc, #136]	; (80007bc <DHT11_ReadData+0xe8>)
 8000732:	f002 f94d 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d0f7      	beq.n	800072c <DHT11_ReadData+0x58>
		
		/*开始接收数据*/   
		DHT11_Data->humi_int  = DHT11_ReadByte();
 800073c:	f7ff ff80 	bl	8000640 <DHT11_ReadByte>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	701a      	strb	r2, [r3, #0]
		DHT11_Data->humi_deci = DHT11_ReadByte();
 8000748:	f7ff ff7a 	bl	8000640 <DHT11_ReadByte>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	705a      	strb	r2, [r3, #1]
		DHT11_Data->temp_int  = DHT11_ReadByte();
 8000754:	f7ff ff74 	bl	8000640 <DHT11_ReadByte>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	709a      	strb	r2, [r3, #2]
		DHT11_Data->temp_deci = DHT11_ReadByte();
 8000760:	f7ff ff6e 	bl	8000640 <DHT11_ReadByte>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	70da      	strb	r2, [r3, #3]
		DHT11_Data->check_sum = DHT11_ReadByte();
 800076c:	f7ff ff68 	bl	8000640 <DHT11_ReadByte>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	711a      	strb	r2, [r3, #4]
		
		DHT11_Mode_OUT_PP();		// 读取结束，主机拉高
 8000778:	f7ff ff36 	bl	80005e8 <DHT11_Mode_OUT_PP>
		DHT11_OUT_1;	
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <DHT11_ReadData+0xe8>)
 8000784:	f002 f93c 	bl	8002a00 <HAL_GPIO_WritePin>
		
		// 数据校验
		if (DHT11_Data->check_sum == DHT11_Data->humi_int + DHT11_Data->humi_deci + DHT11_Data->temp_int + DHT11_Data->temp_deci)	
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	785b      	ldrb	r3, [r3, #1]
 8000798:	4413      	add	r3, r2
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	7892      	ldrb	r2, [r2, #2]
 800079e:	4413      	add	r3, r2
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	78d2      	ldrb	r2, [r2, #3]
 80007a4:	4413      	add	r3, r2
 80007a6:	4299      	cmp	r1, r3
 80007a8:	d101      	bne.n	80007ae <DHT11_ReadData+0xda>
		{
			return 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e002      	b.n	80007b4 <DHT11_ReadData+0xe0>
		}		
		else
		{
			return 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <DHT11_ReadData+0xe0>
		}
	}
	else		// 未收到从机应答
	{
		return 0;
 80007b2:	2300      	movs	r3, #0
	}
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020400 	.word	0x40020400

080007c0 <ShuMaGuan_Enable>:
};
static uint32_t buf[8] = {                                //缓冲区
		0x00,0x00,0x00,0x00,  //1 ~ 4
		0x00,0x00,0x00,0x00   //5 ~ 8
};
void ShuMaGuan_Enable(uint32_t numb){                     //使能某一个数码管
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	; 0x68
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t HC138_PIN_INPUT[8][3] = {
 80007c8:	4a20      	ldr	r2, [pc, #128]	; (800084c <ShuMaGuan_Enable+0x8c>)
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4611      	mov	r1, r2
 80007d0:	2260      	movs	r2, #96	; 0x60
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fd0c 	bl	80051f0 <memcpy>
			{0,0,0},{0,0,1},{0,1,0},{0,1,1},
			{1,0,0},{1,0,1},{1,1,0},{1,1,1}
	};

	HAL_GPIO_WritePin(HC138Ax_PORT,HC138A0_PIN,HC138_PIN_INPUT[numb-1][2]);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80007e8:	4413      	add	r3, r2
 80007ea:	3b58      	subs	r3, #88	; 0x58
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <ShuMaGuan_Enable+0x90>)
 80007f8:	f002 f902 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC138Ax_PORT,HC138A1_PIN,HC138_PIN_INPUT[numb-1][1]);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	1e5a      	subs	r2, r3, #1
 8000800:	4613      	mov	r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4413      	add	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800080c:	4413      	add	r3, r2
 800080e:	3b5c      	subs	r3, #92	; 0x5c
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081a:	480d      	ldr	r0, [pc, #52]	; (8000850 <ShuMaGuan_Enable+0x90>)
 800081c:	f002 f8f0 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC138Ax_PORT,HC138A2_PIN,HC138_PIN_INPUT[numb-1][0]);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000830:	4413      	add	r3, r2
 8000832:	3b60      	subs	r3, #96	; 0x60
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <ShuMaGuan_Enable+0x90>)
 8000840:	f002 f8de 	bl	8002a00 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	3768      	adds	r7, #104	; 0x68
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	080060e0 	.word	0x080060e0
 8000850:	40020800 	.word	0x40020800

08000854 <Change_BUFF>:
void Change_BUFF(uint32_t N_Digital,uint32_t Number){    //更改缓冲区
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
	buf[N_Digital-1] = DuanMa[Number];
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	4906      	ldr	r1, [pc, #24]	; (800087c <Change_BUFF+0x28>)
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <Change_BUFF+0x2c>)
 800086c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000000 	.word	0x20000000
 8000880:	200000dc 	.word	0x200000dc

08000884 <Write_Number_to_ST>:
void Write_Number_to_ST(uint32_t N_Digital){             //写入数据等待触发
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(HC595_PORT,HC595_LCLK_PIN,GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	4816      	ldr	r0, [pc, #88]	; (80008ec <Write_Number_to_ST+0x68>)
 8000892:	f002 f8b5 	bl	8002a00 <HAL_GPIO_WritePin>
	for(int i = 0;i < 8;i ++){
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e01f      	b.n	80008dc <Write_Number_to_ST+0x58>
		HAL_GPIO_WritePin(HC595_PORT,HC595_SCLK_PIN,GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <Write_Number_to_ST+0x68>)
 80008a2:	f002 f8ad 	bl	8002a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HC595_PORT,HC595_DATA_PIN,((buf[N_Digital-1] >> (7 - i)) & 0x01));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <Write_Number_to_ST+0x6c>)
 80008ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2108      	movs	r1, #8
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <Write_Number_to_ST+0x68>)
 80008c8:	f002 f89a 	bl	8002a00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HC595_PORT,HC595_SCLK_PIN,GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2120      	movs	r1, #32
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <Write_Number_to_ST+0x68>)
 80008d2:	f002 f895 	bl	8002a00 <HAL_GPIO_WritePin>
	for(int i = 0;i < 8;i ++){
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b07      	cmp	r3, #7
 80008e0:	dddc      	ble.n	800089c <Write_Number_to_ST+0x18>
	}
}
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020400 	.word	0x40020400
 80008f0:	200000dc 	.word	0x200000dc

080008f4 <Write_Dot>:
void Write_Dot(uint32_t N_Digital){                      //写入小数点
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	buf[N_Digital-1] += 0x80;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3b01      	subs	r3, #1
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <Write_Dot+0x2c>)
 8000902:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3b01      	subs	r3, #1
 800090a:	3280      	adds	r2, #128	; 0x80
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <Write_Dot+0x2c>)
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200000dc 	.word	0x200000dc

08000924 <Lighten_ShuMaGuan>:
void Lighten_ShuMaGuan(){                                //点亮一个数码管
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC595_PORT,HC595_LCLK_PIN,GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2110      	movs	r1, #16
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <Lighten_ShuMaGuan+0x1c>)
 800092e:	f002 f867 	bl	8002a00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC595_PORT,HC595_LCLK_PIN,GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2110      	movs	r1, #16
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <Lighten_ShuMaGuan+0x1c>)
 8000938:	f002 f862 	bl	8002a00 <HAL_GPIO_WritePin>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40020400 	.word	0x40020400

08000944 <Write_Buff>:
void Write_Buff(uint32_t position,uint32_t len,uint32_t dat){   //
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
	uint32_t temp = dat;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	617b      	str	r3, [r7, #20]
	for(uint32_t i = position; i < position + len; i++){
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	e019      	b.n	800098e <Write_Buff+0x4a>
		buf[i] = DuanMa[temp % 10];
 800095a:	6979      	ldr	r1, [r7, #20]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <Write_Buff+0x64>)
 800095e:	fba3 2301 	umull	r2, r3, r3, r1
 8000962:	08da      	lsrs	r2, r3, #3
 8000964:	4613      	mov	r3, r2
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	4413      	add	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	1aca      	subs	r2, r1, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <Write_Buff+0x68>)
 8000970:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000974:	490e      	ldr	r1, [pc, #56]	; (80009b0 <Write_Buff+0x6c>)
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		temp /= 10;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <Write_Buff+0x64>)
 8000980:	fba2 2303 	umull	r2, r3, r2, r3
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	617b      	str	r3, [r7, #20]
	for(uint32_t i = position; i < position + len; i++){
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	3301      	adds	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4413      	add	r3, r2
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3df      	bcc.n	800095a <Write_Buff+0x16>
	}
}
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	371c      	adds	r7, #28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	cccccccd 	.word	0xcccccccd
 80009ac:	20000000 	.word	0x20000000
 80009b0:	200000dc 	.word	0x200000dc

080009b4 <Display_Buff>:
//			Display_1_Dot(9-i, data[i-1]);
//		}
//		for(int j = 0;j <= 10000;j++){}
//	}
//}
void Display_Buff(){                                     //展示缓冲区数据
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	for(int N_Digit = 0;N_Digit < 8;N_Digit ++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e019      	b.n	80009f4 <Display_Buff+0x40>
		Write_Number_to_ST(N_Digit+1);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <Write_Number_to_ST>
		ShuMaGuan_Enable(N_Digit+1);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fef6 	bl	80007c0 <ShuMaGuan_Enable>
		Lighten_ShuMaGuan();
 80009d4:	f7ff ffa6 	bl	8000924 <Lighten_ShuMaGuan>
		for(int i = 0;i <= 20000;i++){}
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	e002      	b.n	80009e4 <Display_Buff+0x30>
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009ea:	4293      	cmp	r3, r2
 80009ec:	ddf7      	ble.n	80009de <Display_Buff+0x2a>
	for(int N_Digit = 0;N_Digit < 8;N_Digit ++){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	dde2      	ble.n	80009c0 <Display_Buff+0xc>
		if(N_Digit == 7){

		}
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <RTC_SetMy_Time>:
//	sTime.DayLightSaving=RTC_DAYLIGHTSAVING_NONE;
//    sTime.StoreOperation=RTC_STOREOPERATION_RESET;
//}

HAL_StatusTypeDef RTC_SetMy_Time(uint8_t hour,uint8_t min,uint8_t sec,uint8_t ampm)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4603      	mov	r3, r0
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	717b      	strb	r3, [r7, #5]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	713b      	strb	r3, [r7, #4]
	RTC_TimeTypeDef RTC_TimeStructure;

	RTC_TimeStructure.Hours=hour;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	733b      	strb	r3, [r7, #12]
	RTC_TimeStructure.Minutes=min;
 8000a26:	79bb      	ldrb	r3, [r7, #6]
 8000a28:	737b      	strb	r3, [r7, #13]
	RTC_TimeStructure.Seconds=sec;
 8000a2a:	797b      	ldrb	r3, [r7, #5]
 8000a2c:	73bb      	strb	r3, [r7, #14]
	RTC_TimeStructure.TimeFormat=ampm;
 8000a2e:	793b      	ldrb	r3, [r7, #4]
 8000a30:	73fb      	strb	r3, [r7, #15]
	RTC_TimeStructure.DayLightSaving=RTC_DAYLIGHTSAVING_NONE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
    RTC_TimeStructure.StoreOperation=RTC_STOREOPERATION_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    return HAL_RTC_SetTime(&hrtc, &RTC_TimeStructure, RTC_FORMAT_BIN);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <RTC_SetMy_Time+0x50>)
 8000a44:	f002 fdbf 	bl	80035c6 <HAL_RTC_SetTime>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200001c0 	.word	0x200001c0

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	b0a7      	sub	sp, #156	; 0x9c
 8000a5c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	int key0 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
	int key1 = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int key2 = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int Flag = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	67fb      	str	r3, [r7, #124]	; 0x7c
	int count = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	67bb      	str	r3, [r7, #120]	; 0x78
	int Warning_Delete = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	677b      	str	r3, [r7, #116]	; 0x74
	int Temp_Humi_Flag = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	673b      	str	r3, [r7, #112]	; 0x70
	int Change_Max_Flag = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	66fb      	str	r3, [r7, #108]	; 0x6c
	int RTC_Clock_Flag = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	66bb      	str	r3, [r7, #104]	; 0x68
	int Change_Time_Flag = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	667b      	str	r3, [r7, #100]	; 0x64
	int Select_Number = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t Max_Temp_int = 25;
 8000a8e:	2319      	movs	r3, #25
 8000a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t Max_Temp_deci = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f001 fbdb 	bl	8002254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 fed3 	bl	8001848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f001 f8ab 	bl	8001bfc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aa6:	f001 f87f 	bl	8001ba8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000aaa:	f000 ffe1 	bl	8001a70 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000aae:	f001 f82d 	bl	8001b0c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000ab2:	f000 ff8d 	bl	80019d0 <MX_TIM1_Init>
  MX_RTC_Init();
 8000ab6:	f000 ff31 	bl	800191c <MX_RTC_Init>
  //HAL_TIM_Base_Start_IT(&htim4);
  //HAL_UART_Receive_IT(&huart1, &temp, 2);
  //HAL_UART_Receive_IT(&huart1, &humi, 2);
  while(1)
  {
	HAL_RTC_GetTime(&hrtc, &Nowtime, RTC_FORMAT_BIN);
 8000aba:	2200      	movs	r2, #0
 8000abc:	49b7      	ldr	r1, [pc, #732]	; (8000d9c <main+0x344>)
 8000abe:	48b8      	ldr	r0, [pc, #736]	; (8000da0 <main+0x348>)
 8000ac0:	f002 fe3e 	bl	8003740 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Nowdate, RTC_FORMAT_BIN);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	49b7      	ldr	r1, [pc, #732]	; (8000da4 <main+0x34c>)
 8000ac8:	48b5      	ldr	r0, [pc, #724]	; (8000da0 <main+0x348>)
 8000aca:	f002 ff3e 	bl	800394a <HAL_RTC_GetDate>
	Warning_Delete = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	677b      	str	r3, [r7, #116]	; 0x74
	Display_Buff();
 8000ad2:	f7ff ff6f 	bl	80009b4 <Display_Buff>
	if(!Flag){     //Flag = 0 时不断展示学号
 8000ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <main+0x96>
		RTC_Clock_Flag = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	66bb      	str	r3, [r7, #104]	; 0x68
		Temp_Humi_Flag = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	673b      	str	r3, [r7, #112]	; 0x70
		Write_Buff(0, 8, 85130012);
 8000ae4:	4ab0      	ldr	r2, [pc, #704]	; (8000da8 <main+0x350>)
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff2b 	bl	8000944 <Write_Buff>
	}
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af2:	48ae      	ldr	r0, [pc, #696]	; (8000dac <main+0x354>)
 8000af4:	f001 ff6c 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d14b      	bne.n	8000b96 <main+0x13e>
		HAL_Delay(20);
 8000afe:	2014      	movs	r0, #20
 8000b00:	f001 fc1a 	bl	8002338 <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b08:	48a8      	ldr	r0, [pc, #672]	; (8000dac <main+0x354>)
 8000b0a:	f001 ff61 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 808a 	bne.w	8000c2a <main+0x1d2>
			Flag = 1;       //按键key1控制学号显示结束
 8000b16:	2301      	movs	r3, #1
 8000b18:	67fb      	str	r3, [r7, #124]	; 0x7c
			key1 ++;
 8000b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			for(uint32_t j = 0;j < 8;j ++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b28:	e008      	b.n	8000b3c <main+0xe4>
				buf[j] = DuanMa[10];
 8000b2a:	4ba1      	ldr	r3, [pc, #644]	; (8000db0 <main+0x358>)
 8000b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b2e:	49a1      	ldr	r1, [pc, #644]	; (8000db4 <main+0x35c>)
 8000b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint32_t j = 0;j < 8;j ++){
 8000b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b38:	3301      	adds	r3, #1
 8000b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d9f3      	bls.n	8000b2a <main+0xd2>
			}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000b42:	e01c      	b.n	8000b7e <main+0x126>
				count ++;     //count 变量用来判断长按还是短按
 8000b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b46:	3301      	adds	r3, #1
 8000b48:	67bb      	str	r3, [r7, #120]	; 0x78
				for(uint32_t j = 0;j < 8;j ++){
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8000b4e:	e013      	b.n	8000b78 <main+0x120>
					buf[j] = DuanMa[10];
 8000b50:	4b97      	ldr	r3, [pc, #604]	; (8000db0 <main+0x358>)
 8000b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b54:	4997      	ldr	r1, [pc, #604]	; (8000db4 <main+0x35c>)
 8000b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					Change_BUFF(j+1, 18);
 8000b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b5e:	3301      	adds	r3, #1
 8000b60:	2112      	movs	r1, #18
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe76 	bl	8000854 <Change_BUFF>
					Display_Buff();
 8000b68:	f7ff ff24 	bl	80009b4 <Display_Buff>
					HAL_Delay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f001 fbe3 	bl	8002338 <HAL_Delay>
				for(uint32_t j = 0;j < 8;j ++){
 8000b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b74:	3301      	adds	r3, #1
 8000b76:	657b      	str	r3, [r7, #84]	; 0x54
 8000b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	d9e8      	bls.n	8000b50 <main+0xf8>
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	488a      	ldr	r0, [pc, #552]	; (8000dac <main+0x354>)
 8000b84:	f001 ff24 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0da      	beq.n	8000b44 <main+0xec>
				}
			}
			HAL_Delay(20);
 8000b8e:	2014      	movs	r0, #20
 8000b90:	f001 fbd2 	bl	8002338 <HAL_Delay>
 8000b94:	e049      	b.n	8000c2a <main+0x1d2>
		}
	}else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000b96:	2104      	movs	r1, #4
 8000b98:	4887      	ldr	r0, [pc, #540]	; (8000db8 <main+0x360>)
 8000b9a:	f001 ff19 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d142      	bne.n	8000c2a <main+0x1d2>
			HAL_Delay(20);
 8000ba4:	2014      	movs	r0, #20
 8000ba6:	f001 fbc7 	bl	8002338 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000baa:	2104      	movs	r1, #4
 8000bac:	4882      	ldr	r0, [pc, #520]	; (8000db8 <main+0x360>)
 8000bae:	f001 ff0f 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d138      	bne.n	8000c2a <main+0x1d2>
			key2 ++;
 8000bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			for(uint32_t j = 0;j < 8;j ++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8000bc6:	e008      	b.n	8000bda <main+0x182>
				buf[j] = DuanMa[10];
 8000bc8:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <main+0x358>)
 8000bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bcc:	4979      	ldr	r1, [pc, #484]	; (8000db4 <main+0x35c>)
 8000bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint32_t j = 0;j < 8;j ++){
 8000bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8000bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d9f3      	bls.n	8000bc8 <main+0x170>
			}
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000be0:	e019      	b.n	8000c16 <main+0x1be>
				for(uint32_t j = 0;j < 8;j ++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000be6:	e013      	b.n	8000c10 <main+0x1b8>
					buf[j] = DuanMa[10];
 8000be8:	4b71      	ldr	r3, [pc, #452]	; (8000db0 <main+0x358>)
 8000bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bec:	4971      	ldr	r1, [pc, #452]	; (8000db4 <main+0x35c>)
 8000bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					Change_BUFF(j+1, 18);
 8000bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	2112      	movs	r1, #18
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe2a 	bl	8000854 <Change_BUFF>
					Display_Buff();
 8000c00:	f7ff fed8 	bl	80009b4 <Display_Buff>
					HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f001 fb97 	bl	8002338 <HAL_Delay>
				for(uint32_t j = 0;j < 8;j ++){
 8000c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d9e8      	bls.n	8000be8 <main+0x190>
			while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000c16:	2104      	movs	r1, #4
 8000c18:	4867      	ldr	r0, [pc, #412]	; (8000db8 <main+0x360>)
 8000c1a:	f001 fed9 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0de      	beq.n	8000be2 <main+0x18a>
				}
			}
			HAL_Delay(20);
 8000c24:	2014      	movs	r0, #20
 8000c26:	f001 fb87 	bl	8002338 <HAL_Delay>
		}
	}
	if(key1 > 0){
 8000c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f340 82b3 	ble.w	800119a <main+0x742>
		if(count > 5){
 8000c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	dd04      	ble.n	8000c44 <main+0x1ec>
			RTC_Clock_Flag = 1;       //时钟显示模式标识
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	66bb      	str	r3, [r7, #104]	; 0x68
			count = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8000c42:	e2aa      	b.n	800119a <main+0x742>
		}else{
			Temp_Humi_Flag = 1;       //温湿度传感报警模式标识
 8000c44:	2301      	movs	r3, #1
 8000c46:	673b      	str	r3, [r7, #112]	; 0x70
		}
	}


	//Temperature and Humidity Sensor While
	while(Temp_Humi_Flag){
 8000c48:	e2a7      	b.n	800119a <main+0x742>
		//Dispaly and Waring Mode
		if(DHT11_ReadData(&DHT11_Data)){
 8000c4a:	485c      	ldr	r0, [pc, #368]	; (8000dbc <main+0x364>)
 8000c4c:	f7ff fd42 	bl	80006d4 <DHT11_ReadData>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8096 	beq.w	8000d84 <main+0x32c>
			printf("Temp:%d.%d   Humi:%d.%d   Temp_Warning:%d.%d\r\n",DHT11_Data.temp_int,
 8000c58:	4b58      	ldr	r3, [pc, #352]	; (8000dbc <main+0x364>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	4618      	mov	r0, r3
					DHT11_Data.temp_deci,DHT11_Data.humi_int,DHT11_Data.humi_deci,Max_Temp_int,Max_Temp_deci);
 8000c5e:	4b57      	ldr	r3, [pc, #348]	; (8000dbc <main+0x364>)
 8000c60:	78db      	ldrb	r3, [r3, #3]
			printf("Temp:%d.%d   Humi:%d.%d   Temp_Warning:%d.%d\r\n",DHT11_Data.temp_int,
 8000c62:	461c      	mov	r4, r3
					DHT11_Data.temp_deci,DHT11_Data.humi_int,DHT11_Data.humi_deci,Max_Temp_int,Max_Temp_deci);
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <main+0x364>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
			printf("Temp:%d.%d   Humi:%d.%d   Temp_Warning:%d.%d\r\n",DHT11_Data.temp_int,
 8000c68:	461d      	mov	r5, r3
					DHT11_Data.temp_deci,DHT11_Data.humi_int,DHT11_Data.humi_deci,Max_Temp_int,Max_Temp_deci);
 8000c6a:	4b54      	ldr	r3, [pc, #336]	; (8000dbc <main+0x364>)
 8000c6c:	785b      	ldrb	r3, [r3, #1]
			printf("Temp:%d.%d   Humi:%d.%d   Temp_Warning:%d.%d\r\n",DHT11_Data.temp_int,
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000c74:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8000c78:	9202      	str	r2, [sp, #8]
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	9100      	str	r1, [sp, #0]
 8000c7e:	462b      	mov	r3, r5
 8000c80:	4622      	mov	r2, r4
 8000c82:	4601      	mov	r1, r0
 8000c84:	484e      	ldr	r0, [pc, #312]	; (8000dc0 <main+0x368>)
 8000c86:	f004 fac9 	bl	800521c <iprintf>
			for(uint32_t j = 0;j < 8;j ++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c8e:	e008      	b.n	8000ca2 <main+0x24a>
				buf[j] = DuanMa[10];
 8000c90:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <main+0x358>)
 8000c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c94:	4947      	ldr	r1, [pc, #284]	; (8000db4 <main+0x35c>)
 8000c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint32_t j = 0;j < 8;j ++){
 8000c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ca4:	2b07      	cmp	r3, #7
 8000ca6:	d9f3      	bls.n	8000c90 <main+0x238>
			}
			Write_Buff(1, 3, (DHT11_Data.temp_deci*100 + (DHT11_Data.temp_int % 10)*10 + (DHT11_Data.temp_int-(DHT11_Data.temp_int % 10))/10));
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <main+0x364>)
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	461a      	mov	r2, r3
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	fb03 f002 	mul.w	r0, r3, r2
 8000cb4:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <main+0x364>)
 8000cb6:	789a      	ldrb	r2, [r3, #2]
 8000cb8:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <main+0x36c>)
 8000cba:	fba3 1302 	umull	r1, r3, r3, r2
 8000cbe:	08d9      	lsrs	r1, r3, #3
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4418      	add	r0, r3
 8000cd8:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <main+0x364>)
 8000cda:	789b      	ldrb	r3, [r3, #2]
 8000cdc:	461c      	mov	r4, r3
 8000cde:	4b37      	ldr	r3, [pc, #220]	; (8000dbc <main+0x364>)
 8000ce0:	789a      	ldrb	r2, [r3, #2]
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <main+0x36c>)
 8000ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce8:	08d9      	lsrs	r1, r3, #3
 8000cea:	460b      	mov	r3, r1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	1ae3      	subs	r3, r4, r3
 8000cf8:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <main+0x370>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	1092      	asrs	r2, r2, #2
 8000d00:	17db      	asrs	r3, r3, #31
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4403      	add	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	2103      	movs	r1, #3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fe1a 	bl	8000944 <Write_Buff>
			Write_Buff(5, 3, (DHT11_Data.humi_deci*100 + (DHT11_Data.humi_int % 10)*10 + (DHT11_Data.humi_int-(DHT11_Data.humi_int % 10))/10));
 8000d10:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <main+0x364>)
 8000d12:	785b      	ldrb	r3, [r3, #1]
 8000d14:	461a      	mov	r2, r3
 8000d16:	2364      	movs	r3, #100	; 0x64
 8000d18:	fb03 f002 	mul.w	r0, r3, r2
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <main+0x364>)
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <main+0x36c>)
 8000d22:	fba3 1302 	umull	r1, r3, r3, r2
 8000d26:	08d9      	lsrs	r1, r3, #3
 8000d28:	460b      	mov	r3, r1
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4418      	add	r0, r3
 8000d40:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <main+0x364>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461c      	mov	r4, r3
 8000d46:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <main+0x364>)
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <main+0x36c>)
 8000d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d50:	08d9      	lsrs	r1, r3, #3
 8000d52:	460b      	mov	r3, r1
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	440b      	add	r3, r1
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	1ae3      	subs	r3, r4, r3
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <main+0x370>)
 8000d62:	fb82 1203 	smull	r1, r2, r2, r3
 8000d66:	1092      	asrs	r2, r2, #2
 8000d68:	17db      	asrs	r3, r3, #31
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	4403      	add	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2103      	movs	r1, #3
 8000d72:	2005      	movs	r0, #5
 8000d74:	f7ff fde6 	bl	8000944 <Write_Buff>
			Write_Dot(3);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f7ff fdbb 	bl	80008f4 <Write_Dot>
			Write_Dot(7);
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fdb8 	bl	80008f4 <Write_Dot>
		}
		Change_BUFF(1, 16);
 8000d84:	2110      	movs	r1, #16
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff fd64 	bl	8000854 <Change_BUFF>
		Change_BUFF(5, 15);
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f7ff fd60 	bl	8000854 <Change_BUFF>
		Display_Buff();
 8000d94:	f7ff fe0e 	bl	80009b4 <Display_Buff>
		//Change Max Mode Code
		while(Change_Max_Flag){
 8000d98:	e11f      	b.n	8000fda <main+0x582>
 8000d9a:	bf00      	nop
 8000d9c:	20000228 	.word	0x20000228
 8000da0:	200001c0 	.word	0x200001c0
 8000da4:	20000284 	.word	0x20000284
 8000da8:	0512fb1c 	.word	0x0512fb1c
 8000dac:	40020800 	.word	0x40020800
 8000db0:	20000000 	.word	0x20000000
 8000db4:	200000dc 	.word	0x200000dc
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	200001b8 	.word	0x200001b8
 8000dc0:	08006140 	.word	0x08006140
 8000dc4:	cccccccd 	.word	0xcccccccd
 8000dc8:	66666667 	.word	0x66666667
			//Debug With UART
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	48af      	ldr	r0, [pc, #700]	; (8001090 <main+0x638>)
 8000dd2:	f001 fdfd 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d13c      	bne.n	8000e56 <main+0x3fe>
				HAL_Delay(20);
 8000ddc:	2014      	movs	r0, #20
 8000dde:	f001 faab 	bl	8002338 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	48aa      	ldr	r0, [pc, #680]	; (8001090 <main+0x638>)
 8000de8:	f001 fdf2 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d131      	bne.n	8000e56 <main+0x3fe>
					if(Max_Temp_deci == 0){
 8000df2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d108      	bne.n	8000e0c <main+0x3b4>
						Max_Temp_deci = 9;
 8000dfa:	2309      	movs	r3, #9
 8000dfc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						Max_Temp_int --;
 8000e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e04:	3b01      	subs	r3, #1
 8000e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e0a:	e019      	b.n	8000e40 <main+0x3e8>
					}else{
						Max_Temp_deci --;
 8000e0c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000e10:	3b01      	subs	r3, #1
 8000e12:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					}
					while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 8000e16:	e013      	b.n	8000e40 <main+0x3e8>
						for(uint32_t j = 0;j < 8;j ++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000e1c:	e00d      	b.n	8000e3a <main+0x3e2>
							buf[j] = DuanMa[10];
 8000e1e:	4b9d      	ldr	r3, [pc, #628]	; (8001094 <main+0x63c>)
 8000e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e22:	499d      	ldr	r1, [pc, #628]	; (8001098 <main+0x640>)
 8000e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							Display_Buff();
 8000e2a:	f7ff fdc3 	bl	80009b4 <Display_Buff>
							HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f001 fa82 	bl	8002338 <HAL_Delay>
						for(uint32_t j = 0;j < 8;j ++){
 8000e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e36:	3301      	adds	r3, #1
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
 8000e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d9ee      	bls.n	8000e1e <main+0x3c6>
					while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	4892      	ldr	r0, [pc, #584]	; (8001090 <main+0x638>)
 8000e46:	f001 fdc3 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0e3      	beq.n	8000e18 <main+0x3c0>
						}
					}
					HAL_Delay(20);
 8000e50:	2014      	movs	r0, #20
 8000e52:	f001 fa71 	bl	8002338 <HAL_Delay>
				}
			}
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8000e56:	2104      	movs	r1, #4
 8000e58:	4890      	ldr	r0, [pc, #576]	; (800109c <main+0x644>)
 8000e5a:	f001 fdb9 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d137      	bne.n	8000ed4 <main+0x47c>
				HAL_Delay(20);
 8000e64:	2014      	movs	r0, #20
 8000e66:	f001 fa67 	bl	8002338 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	488b      	ldr	r0, [pc, #556]	; (800109c <main+0x644>)
 8000e6e:	f001 fdaf 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d12d      	bne.n	8000ed4 <main+0x47c>
					if(Max_Temp_deci == 9){
 8000e78:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000e7c:	2b09      	cmp	r3, #9
 8000e7e:	d108      	bne.n	8000e92 <main+0x43a>
						Max_Temp_deci = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						Max_Temp_int ++;
 8000e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000e90:	e016      	b.n	8000ec0 <main+0x468>
					}else{
						Max_Temp_deci ++;
 8000e92:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000e96:	3301      	adds	r3, #1
 8000e98:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					}
					while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8000e9c:	e010      	b.n	8000ec0 <main+0x468>
						for(uint32_t j = 0;j < 8;j ++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ea2:	e00a      	b.n	8000eba <main+0x462>
							buf[j] = DuanMa[10];
 8000ea4:	4b7b      	ldr	r3, [pc, #492]	; (8001094 <main+0x63c>)
 8000ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ea8:	497b      	ldr	r1, [pc, #492]	; (8001098 <main+0x640>)
 8000eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							Display_Buff();
 8000eb0:	f7ff fd80 	bl	80009b4 <Display_Buff>
						for(uint32_t j = 0;j < 8;j ++){
 8000eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8000eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d9f1      	bls.n	8000ea4 <main+0x44c>
					while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4876      	ldr	r0, [pc, #472]	; (800109c <main+0x644>)
 8000ec4:	f001 fd84 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0e7      	beq.n	8000e9e <main+0x446>
						}
					}
					HAL_Delay(20);
 8000ece:	2014      	movs	r0, #20
 8000ed0:	f001 fa32 	bl	8002338 <HAL_Delay>
				}
			}
			//Display Now Max_Temperature
			for(uint32_t j = 0;j < 8;j ++){
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ed8:	e008      	b.n	8000eec <main+0x494>
				buf[j] = DuanMa[10];
 8000eda:	4b6e      	ldr	r3, [pc, #440]	; (8001094 <main+0x63c>)
 8000edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ede:	496e      	ldr	r1, [pc, #440]	; (8001098 <main+0x640>)
 8000ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint32_t j = 0;j < 8;j ++){
 8000ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee8:	3301      	adds	r3, #1
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d9f3      	bls.n	8000eda <main+0x482>
			}
			Write_Buff(5,8,(Max_Temp_deci*100 + (Max_Temp_int % 10)*10 + (Max_Temp_int -(Max_Temp_int % 10))/10));
 8000ef2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000ef6:	2264      	movs	r2, #100	; 0x64
 8000ef8:	fb02 f003 	mul.w	r0, r2, r3
 8000efc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000f00:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <main+0x648>)
 8000f02:	fba3 1302 	umull	r1, r3, r3, r2
 8000f06:	08d9      	lsrs	r1, r3, #3
 8000f08:	460b      	mov	r3, r1
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4418      	add	r0, r3
 8000f20:	f897 405f 	ldrb.w	r4, [r7, #95]	; 0x5f
 8000f24:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000f28:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <main+0x648>)
 8000f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f2e:	08d9      	lsrs	r1, r3, #3
 8000f30:	460b      	mov	r3, r1
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	1ae3      	subs	r3, r4, r3
 8000f3e:	4a59      	ldr	r2, [pc, #356]	; (80010a4 <main+0x64c>)
 8000f40:	fb82 1203 	smull	r1, r2, r2, r3
 8000f44:	1092      	asrs	r2, r2, #2
 8000f46:	17db      	asrs	r3, r3, #31
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4403      	add	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2108      	movs	r1, #8
 8000f50:	2005      	movs	r0, #5
 8000f52:	f7ff fcf7 	bl	8000944 <Write_Buff>
			Change_BUFF(4, 15);
 8000f56:	210f      	movs	r1, #15
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f7ff fc7b 	bl	8000854 <Change_BUFF>
			Change_BUFF(5, 16);
 8000f5e:	2110      	movs	r1, #16
 8000f60:	2005      	movs	r0, #5
 8000f62:	f7ff fc77 	bl	8000854 <Change_BUFF>
			Write_Dot(7);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f7ff fcc4 	bl	80008f4 <Write_Dot>
			Display_Buff();
 8000f6c:	f7ff fd22 	bl	80009b4 <Display_Buff>
			//Return To "Display Temperature Humidity"
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8000f70:	2101      	movs	r1, #1
 8000f72:	484d      	ldr	r0, [pc, #308]	; (80010a8 <main+0x650>)
 8000f74:	f001 fd2c 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d02d      	beq.n	8000fda <main+0x582>
				 HAL_Delay(20);
 8000f7e:	2014      	movs	r0, #20
 8000f80:	f001 f9da 	bl	8002338 <HAL_Delay>
				 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8000f84:	2101      	movs	r1, #1
 8000f86:	4848      	ldr	r0, [pc, #288]	; (80010a8 <main+0x650>)
 8000f88:	f001 fd22 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d023      	beq.n	8000fda <main+0x582>
					Flag = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	67fb      	str	r3, [r7, #124]	; 0x7c
					Change_Max_Flag = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	66fb      	str	r3, [r7, #108]	; 0x6c
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8000f9a:	e013      	b.n	8000fc4 <main+0x56c>
						for(uint32_t j = 0;j < 8;j ++){
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fa0:	e00d      	b.n	8000fbe <main+0x566>
							Change_BUFF(j+1, 18);
 8000fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	2112      	movs	r1, #18
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc53 	bl	8000854 <Change_BUFF>
							Display_Buff();
 8000fae:	f7ff fd01 	bl	80009b4 <Display_Buff>
							HAL_Delay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f001 f9c0 	bl	8002338 <HAL_Delay>
						for(uint32_t j = 0;j < 8;j ++){
 8000fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fba:	3301      	adds	r3, #1
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d9ee      	bls.n	8000fa2 <main+0x54a>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4838      	ldr	r0, [pc, #224]	; (80010a8 <main+0x650>)
 8000fc8:	f001 fd02 	bl	80029d0 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e4      	bne.n	8000f9c <main+0x544>
						}
					}
					HAL_Delay(20);
 8000fd2:	2014      	movs	r0, #20
 8000fd4:	f001 f9b0 	bl	8002338 <HAL_Delay>
					break;
 8000fd8:	e003      	b.n	8000fe2 <main+0x58a>
		while(Change_Max_Flag){
 8000fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aef5 	bne.w	8000dcc <main+0x374>
				 }
			}
		}
		//High Temperature Warning and Delete
		if(((DHT11_Data.temp_int >= Max_Temp_int)&(DHT11_Data.temp_deci >= Max_Temp_deci))&(!Warning_Delete)){
 8000fe2:	4b32      	ldr	r3, [pc, #200]	; (80010ac <main+0x654>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8000fea:	429a      	cmp	r2, r3
 8000fec:	bf94      	ite	ls
 8000fee:	2301      	movls	r3, #1
 8000ff0:	2300      	movhi	r3, #0
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <main+0x654>)
 8000ff6:	78db      	ldrb	r3, [r3, #3]
 8000ff8:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	bf94      	ite	ls
 8001000:	2301      	movls	r3, #1
 8001002:	2300      	movhi	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4013      	ands	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d04a      	beq.n	80010b4 <main+0x65c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	4822      	ldr	r0, [pc, #136]	; (80010b0 <main+0x658>)
 8001026:	f001 fceb 	bl	8002a00 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 800102a:	2101      	movs	r1, #1
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <main+0x650>)
 800102e:	f001 fccf 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d062      	beq.n	80010fe <main+0x6a6>
				 HAL_Delay(20);
 8001038:	2014      	movs	r0, #20
 800103a:	f001 f97d 	bl	8002338 <HAL_Delay>
				 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 800103e:	2101      	movs	r1, #1
 8001040:	4819      	ldr	r0, [pc, #100]	; (80010a8 <main+0x650>)
 8001042:	f001 fcc5 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d058      	beq.n	80010fe <main+0x6a6>
					 Warning_Delete = 1;
 800104c:	2301      	movs	r3, #1
 800104e:	677b      	str	r3, [r7, #116]	; 0x74
					 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8001050:	e013      	b.n	800107a <main+0x622>
							for(uint32_t j = 0;j < 8;j ++){
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
 8001056:	e00d      	b.n	8001074 <main+0x61c>
								Change_BUFF(j+1, 18);
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	3301      	adds	r3, #1
 800105c:	2112      	movs	r1, #18
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fbf8 	bl	8000854 <Change_BUFF>
								Display_Buff();
 8001064:	f7ff fca6 	bl	80009b4 <Display_Buff>
								HAL_Delay(1);
 8001068:	2001      	movs	r0, #1
 800106a:	f001 f965 	bl	8002338 <HAL_Delay>
							for(uint32_t j = 0;j < 8;j ++){
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	3301      	adds	r3, #1
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
 8001074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001076:	2b07      	cmp	r3, #7
 8001078:	d9ee      	bls.n	8001058 <main+0x600>
					 while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 800107a:	2101      	movs	r1, #1
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <main+0x650>)
 800107e:	f001 fca7 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1e4      	bne.n	8001052 <main+0x5fa>
							}
					 }
					 HAL_Delay(20);
 8001088:	2014      	movs	r0, #20
 800108a:	f001 f955 	bl	8002338 <HAL_Delay>
 800108e:	e036      	b.n	80010fe <main+0x6a6>
 8001090:	40020800 	.word	0x40020800
 8001094:	20000000 	.word	0x20000000
 8001098:	200000dc 	.word	0x200000dc
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	cccccccd 	.word	0xcccccccd
 80010a4:	66666667 	.word	0x66666667
 80010a8:	40020000 	.word	0x40020000
 80010ac:	200001b8 	.word	0x200001b8
 80010b0:	40020400 	.word	0x40020400
				 }
			}
		}else if(((DHT11_Data.temp_int)*10+(DHT11_Data.temp_deci) < (Max_Temp_int*10+Max_Temp_deci))|(Warning_Delete)){
 80010b4:	4bb0      	ldr	r3, [pc, #704]	; (8001378 <main+0x920>)
 80010b6:	789b      	ldrb	r3, [r3, #2]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	461a      	mov	r2, r3
 80010c4:	4bac      	ldr	r3, [pc, #688]	; (8001378 <main+0x920>)
 80010c6:	78db      	ldrb	r3, [r3, #3]
 80010c8:	18d1      	adds	r1, r2, r3
 80010ca:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	461a      	mov	r2, r3
 80010d8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010dc:	4413      	add	r3, r2
 80010de:	4299      	cmp	r1, r3
 80010e0:	bfb4      	ite	lt
 80010e2:	2301      	movlt	r3, #1
 80010e4:	2300      	movge	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ec:	4313      	orrs	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <main+0x6a6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f8:	48a0      	ldr	r0, [pc, #640]	; (800137c <main+0x924>)
 80010fa:	f001 fc81 	bl	8002a00 <HAL_GPIO_WritePin>
		}
		//Key0: Go To Change Mode
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80010fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001102:	489f      	ldr	r0, [pc, #636]	; (8001380 <main+0x928>)
 8001104:	f001 fc64 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12c      	bne.n	8001168 <main+0x710>
			HAL_Delay(20);
 800110e:	2014      	movs	r0, #20
 8001110:	f001 f912 	bl	8002338 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001118:	4899      	ldr	r0, [pc, #612]	; (8001380 <main+0x928>)
 800111a:	f001 fc59 	bl	80029d0 <HAL_GPIO_ReadPin>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d121      	bne.n	8001168 <main+0x710>
				Change_Max_Flag = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	66fb      	str	r3, [r7, #108]	; 0x6c
				while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001128:	e013      	b.n	8001152 <main+0x6fa>
					for(uint32_t j = 0;j < 8;j ++){
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
 800112e:	e00d      	b.n	800114c <main+0x6f4>
						Change_BUFF(j+1, 18);
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	3301      	adds	r3, #1
 8001134:	2112      	movs	r1, #18
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fb8c 	bl	8000854 <Change_BUFF>
						Display_Buff();
 800113c:	f7ff fc3a 	bl	80009b4 <Display_Buff>
						HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 f8f9 	bl	8002338 <HAL_Delay>
					for(uint32_t j = 0;j < 8;j ++){
 8001146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001148:	3301      	adds	r3, #1
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	2b07      	cmp	r3, #7
 8001150:	d9ee      	bls.n	8001130 <main+0x6d8>
				while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001156:	488a      	ldr	r0, [pc, #552]	; (8001380 <main+0x928>)
 8001158:	f001 fc3a 	bl	80029d0 <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0e3      	beq.n	800112a <main+0x6d2>
					}
				}
				HAL_Delay(20);
 8001162:	2014      	movs	r0, #20
 8001164:	f001 f8e8 	bl	8002338 <HAL_Delay>
			}
		}
		//WK-Up:Clear
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8001168:	2101      	movs	r1, #1
 800116a:	4886      	ldr	r0, [pc, #536]	; (8001384 <main+0x92c>)
 800116c:	f001 fc30 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d011      	beq.n	800119a <main+0x742>
			 HAL_Delay(20);
 8001176:	2014      	movs	r0, #20
 8001178:	f001 f8de 	bl	8002338 <HAL_Delay>
			 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 800117c:	2101      	movs	r1, #1
 800117e:	4881      	ldr	r0, [pc, #516]	; (8001384 <main+0x92c>)
 8001180:	f001 fc26 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <main+0x742>
				 Temp_Humi_Flag = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	673b      	str	r3, [r7, #112]	; 0x70
				 Flag = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	67fb      	str	r3, [r7, #124]	; 0x7c
				 key1 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				 break;
 8001198:	e003      	b.n	80011a2 <main+0x74a>
	while(Temp_Humi_Flag){
 800119a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800119c:	2b00      	cmp	r3, #0
 800119e:	f47f ad54 	bne.w	8000c4a <main+0x1f2>
			 }
		}
	}
	//RTC Clock While
	while(RTC_Clock_Flag){
 80011a2:	e33d      	b.n	8001820 <main+0xdc8>
		HAL_RTC_GetTime(&hrtc, &Nowtime, RTC_FORMAT_BIN);
 80011a4:	2200      	movs	r2, #0
 80011a6:	4978      	ldr	r1, [pc, #480]	; (8001388 <main+0x930>)
 80011a8:	4878      	ldr	r0, [pc, #480]	; (800138c <main+0x934>)
 80011aa:	f002 fac9 	bl	8003740 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Nowdate, RTC_FORMAT_BIN);
 80011ae:	2200      	movs	r2, #0
 80011b0:	4977      	ldr	r1, [pc, #476]	; (8001390 <main+0x938>)
 80011b2:	4876      	ldr	r0, [pc, #472]	; (800138c <main+0x934>)
 80011b4:	f002 fbc9 	bl	800394a <HAL_RTC_GetDate>
		Time_Select[0] = Nowtime.Hours;
 80011b8:	4b73      	ldr	r3, [pc, #460]	; (8001388 <main+0x930>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b75      	ldr	r3, [pc, #468]	; (8001394 <main+0x93c>)
 80011be:	701a      	strb	r2, [r3, #0]
		Time_Select[1] = Nowtime.Minutes;
 80011c0:	4b71      	ldr	r3, [pc, #452]	; (8001388 <main+0x930>)
 80011c2:	785a      	ldrb	r2, [r3, #1]
 80011c4:	4b73      	ldr	r3, [pc, #460]	; (8001394 <main+0x93c>)
 80011c6:	705a      	strb	r2, [r3, #1]
		Time_Select[2] = Nowtime.Seconds;
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <main+0x930>)
 80011ca:	789a      	ldrb	r2, [r3, #2]
 80011cc:	4b71      	ldr	r3, [pc, #452]	; (8001394 <main+0x93c>)
 80011ce:	709a      	strb	r2, [r3, #2]
		//Change Time Mode Code
		while(Change_Time_Flag){
 80011d0:	e23a      	b.n	8001648 <main+0xbf0>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	486a      	ldr	r0, [pc, #424]	; (8001380 <main+0x928>)
 80011d8:	f001 fbfa 	bl	80029d0 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d176      	bne.n	80012d0 <main+0x878>
				HAL_Delay(20);
 80011e2:	2014      	movs	r0, #20
 80011e4:	f001 f8a8 	bl	8002338 <HAL_Delay>
				if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == GPIO_PIN_RESET){
 80011e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ec:	4864      	ldr	r0, [pc, #400]	; (8001380 <main+0x928>)
 80011ee:	f001 fbef 	bl	80029d0 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d16b      	bne.n	80012d0 <main+0x878>
					Select_Number ++;
 80011f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011fa:	3301      	adds	r3, #1
 80011fc:	663b      	str	r3, [r7, #96]	; 0x60
					Select_Number %= 3;
 80011fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001200:	4b65      	ldr	r3, [pc, #404]	; (8001398 <main+0x940>)
 8001202:	fb83 3102 	smull	r3, r1, r3, r2
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1ac9      	subs	r1, r1, r3
 800120a:	460b      	mov	r3, r1
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	440b      	add	r3, r1
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	663b      	str	r3, [r7, #96]	; 0x60
					while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == GPIO_PIN_RESET){
 8001214:	e051      	b.n	80012ba <main+0x862>
						switch(Select_Number){
 8001216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001218:	2b02      	cmp	r3, #2
 800121a:	d039      	beq.n	8001290 <main+0x838>
 800121c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800121e:	2b02      	cmp	r3, #2
 8001220:	dc4b      	bgt.n	80012ba <main+0x862>
 8001222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <main+0x7d8>
 8001228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800122a:	2b01      	cmp	r3, #1
 800122c:	d015      	beq.n	800125a <main+0x802>
 800122e:	e044      	b.n	80012ba <main+0x862>
						case 0:
							for(uint32_t j = 3;j < 8;j ++){
 8001230:	2303      	movs	r3, #3
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001234:	e00d      	b.n	8001252 <main+0x7fa>
								Change_BUFF(j+1, 18);
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	3301      	adds	r3, #1
 800123a:	2112      	movs	r1, #18
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fb09 	bl	8000854 <Change_BUFF>
								Display_Buff();
 8001242:	f7ff fbb7 	bl	80009b4 <Display_Buff>
								HAL_Delay(1);
 8001246:	2001      	movs	r0, #1
 8001248:	f001 f876 	bl	8002338 <HAL_Delay>
							for(uint32_t j = 3;j < 8;j ++){
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	3301      	adds	r3, #1
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	2b07      	cmp	r3, #7
 8001256:	d9ee      	bls.n	8001236 <main+0x7de>
							}break;
 8001258:	e02f      	b.n	80012ba <main+0x862>
						case 1:
							for(uint32_t j = 0;j < 2;j ++){
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
 800125e:	e013      	b.n	8001288 <main+0x830>
								Change_BUFF(j+1, 18);
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	3301      	adds	r3, #1
 8001264:	2112      	movs	r1, #18
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff faf4 	bl	8000854 <Change_BUFF>
								Change_BUFF(j+7, 18);
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	3307      	adds	r3, #7
 8001270:	2112      	movs	r1, #18
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff faee 	bl	8000854 <Change_BUFF>
								Display_Buff();
 8001278:	f7ff fb9c 	bl	80009b4 <Display_Buff>
								HAL_Delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f001 f85b 	bl	8002338 <HAL_Delay>
							for(uint32_t j = 0;j < 2;j ++){
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	3301      	adds	r3, #1
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	2b01      	cmp	r3, #1
 800128c:	d9e8      	bls.n	8001260 <main+0x808>
							}break;
 800128e:	e014      	b.n	80012ba <main+0x862>
						case 2:
							for(uint32_t j = 0;j < 5;j ++){
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	e00d      	b.n	80012b2 <main+0x85a>
								Change_BUFF(j+1, 18);
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	3301      	adds	r3, #1
 800129a:	2112      	movs	r1, #18
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fad9 	bl	8000854 <Change_BUFF>
								Display_Buff();
 80012a2:	f7ff fb87 	bl	80009b4 <Display_Buff>
								HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 f846 	bl	8002338 <HAL_Delay>
							for(uint32_t j = 0;j < 5;j ++){
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3301      	adds	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d9ee      	bls.n	8001296 <main+0x83e>
							}break;
 80012b8:	bf00      	nop
					while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == GPIO_PIN_RESET){
 80012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012be:	4830      	ldr	r0, [pc, #192]	; (8001380 <main+0x928>)
 80012c0:	f001 fb86 	bl	80029d0 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0a5      	beq.n	8001216 <main+0x7be>
						}
					}
					HAL_Delay(20);
 80012ca:	2014      	movs	r0, #20
 80012cc:	f001 f834 	bl	8002338 <HAL_Delay>
				}
			}
			for(int i = 0;i < 3;i ++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	e0fe      	b.n	80014d4 <main+0xa7c>
				if(Select_Number == i){
 80012d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	429a      	cmp	r2, r3
 80012dc:	f040 80f7 	bne.w	80014ce <main+0xa76>
					if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	4826      	ldr	r0, [pc, #152]	; (8001380 <main+0x928>)
 80012e6:	f001 fb73 	bl	80029d0 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d17d      	bne.n	80013ec <main+0x994>
						HAL_Delay(20);
 80012f0:	2014      	movs	r0, #20
 80012f2:	f001 f821 	bl	8002338 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	4821      	ldr	r0, [pc, #132]	; (8001380 <main+0x928>)
 80012fc:	f001 fb68 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d172      	bne.n	80013ec <main+0x994>
							if(i == 0){
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d117      	bne.n	800133c <main+0x8e4>
								if(Time_Select[i] == 0){
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <main+0x93c>)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d105      	bne.n	8001324 <main+0x8cc>
									Time_Select[i] = 23;
 8001318:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <main+0x93c>)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	4413      	add	r3, r2
 800131e:	2217      	movs	r2, #23
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e058      	b.n	80013d6 <main+0x97e>
								}else{
									Time_Select[i] --;
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <main+0x93c>)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	b2d9      	uxtb	r1, r3
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <main+0x93c>)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	4413      	add	r3, r2
 8001336:	460a      	mov	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e04c      	b.n	80013d6 <main+0x97e>
								}
							}else{
								if(Time_Select[i] == 0){
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <main+0x93c>)
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <main+0x8fc>
									Time_Select[i] = 59;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <main+0x93c>)
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	4413      	add	r3, r2
 800134e:	223b      	movs	r2, #59	; 0x3b
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e040      	b.n	80013d6 <main+0x97e>
								}else{
									Time_Select[i] --;
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <main+0x93c>)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	b2d9      	uxtb	r1, r3
 8001360:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <main+0x93c>)
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	4413      	add	r3, r2
 8001366:	460a      	mov	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
								}
							}
							while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 800136a:	e034      	b.n	80013d6 <main+0x97e>
								for(uint32_t j = 3*i;j < 3*i+2;j ++){
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e025      	b.n	80013c4 <main+0x96c>
 8001378:	200001b8 	.word	0x200001b8
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020000 	.word	0x40020000
 8001388:	20000228 	.word	0x20000228
 800138c:	200001c0 	.word	0x200001c0
 8001390:	20000284 	.word	0x20000284
 8001394:	200000d8 	.word	0x200000d8
 8001398:	55555556 	.word	0x55555556
									buf[j] = DuanMa[10];
 800139c:	4ba2      	ldr	r3, [pc, #648]	; (8001628 <main+0xbd0>)
 800139e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a0:	49a2      	ldr	r1, [pc, #648]	; (800162c <main+0xbd4>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									Change_BUFF(j+1, 10);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	210a      	movs	r1, #10
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fa50 	bl	8000854 <Change_BUFF>
									Display_Buff();
 80013b4:	f7ff fafe 	bl	80009b4 <Display_Buff>
									HAL_Delay(1);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 ffbd 	bl	8002338 <HAL_Delay>
								for(uint32_t j = 3*i;j < 3*i+2;j ++){
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	6a3a      	ldr	r2, [r7, #32]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	3302      	adds	r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3e2      	bcc.n	800139c <main+0x944>
							while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_8) == GPIO_PIN_RESET){
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	4895      	ldr	r0, [pc, #596]	; (8001630 <main+0xbd8>)
 80013dc:	f001 faf8 	bl	80029d0 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0c2      	beq.n	800136c <main+0x914>
								}
							}
							HAL_Delay(20);
 80013e6:	2014      	movs	r0, #20
 80013e8:	f000 ffa6 	bl	8002338 <HAL_Delay>
						}
					}
					if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 80013ec:	2104      	movs	r1, #4
 80013ee:	4891      	ldr	r0, [pc, #580]	; (8001634 <main+0xbdc>)
 80013f0:	f001 faee 	bl	80029d0 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d169      	bne.n	80014ce <main+0xa76>
						HAL_Delay(20);
 80013fa:	2014      	movs	r0, #20
 80013fc:	f000 ff9c 	bl	8002338 <HAL_Delay>
						if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8001400:	2104      	movs	r1, #4
 8001402:	488c      	ldr	r0, [pc, #560]	; (8001634 <main+0xbdc>)
 8001404:	f001 fae4 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d15f      	bne.n	80014ce <main+0xa76>
							if(i == 0){
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d117      	bne.n	8001444 <main+0x9ec>
								if(Time_Select[i] == 23){
 8001414:	4a88      	ldr	r2, [pc, #544]	; (8001638 <main+0xbe0>)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b17      	cmp	r3, #23
 800141e:	d105      	bne.n	800142c <main+0x9d4>
									Time_Select[i] = 0;
 8001420:	4a85      	ldr	r2, [pc, #532]	; (8001638 <main+0xbe0>)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	4413      	add	r3, r2
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e046      	b.n	80014ba <main+0xa62>
								}else{
									Time_Select[i] ++;
 800142c:	4a82      	ldr	r2, [pc, #520]	; (8001638 <main+0xbe0>)
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	b2d9      	uxtb	r1, r3
 8001438:	4a7f      	ldr	r2, [pc, #508]	; (8001638 <main+0xbe0>)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	4413      	add	r3, r2
 800143e:	460a      	mov	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e03a      	b.n	80014ba <main+0xa62>
								}
							}else{
								if(Time_Select[i] == 59){
 8001444:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <main+0xbe0>)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b3b      	cmp	r3, #59	; 0x3b
 800144e:	d105      	bne.n	800145c <main+0xa04>
									Time_Select[i] = 0;
 8001450:	4a79      	ldr	r2, [pc, #484]	; (8001638 <main+0xbe0>)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	4413      	add	r3, r2
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e02e      	b.n	80014ba <main+0xa62>
								}else{
									Time_Select[i] ++;
 800145c:	4a76      	ldr	r2, [pc, #472]	; (8001638 <main+0xbe0>)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2d9      	uxtb	r1, r3
 8001468:	4a73      	ldr	r2, [pc, #460]	; (8001638 <main+0xbe0>)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	4413      	add	r3, r2
 800146e:	460a      	mov	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
								}
							}
							while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 8001472:	e022      	b.n	80014ba <main+0xa62>
								for(uint32_t j = 3*i;j < 3*i+2;j ++){
 8001474:	6a3a      	ldr	r2, [r7, #32]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
 800147e:	e013      	b.n	80014a8 <main+0xa50>
									buf[j] = DuanMa[10];
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <main+0xbd0>)
 8001482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001484:	4969      	ldr	r1, [pc, #420]	; (800162c <main+0xbd4>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									Change_BUFF(j+1, 10);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	3301      	adds	r3, #1
 8001490:	210a      	movs	r1, #10
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f9de 	bl	8000854 <Change_BUFF>
									Display_Buff();
 8001498:	f7ff fa8c 	bl	80009b4 <Display_Buff>
									HAL_Delay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 ff4b 	bl	8002338 <HAL_Delay>
								for(uint32_t j = 3*i;j < 3*i+2;j ++){
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	6a3a      	ldr	r2, [r7, #32]
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3302      	adds	r3, #2
 80014b2:	461a      	mov	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d3e2      	bcc.n	8001480 <main+0xa28>
							while(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2) == GPIO_PIN_RESET){
 80014ba:	2104      	movs	r1, #4
 80014bc:	485d      	ldr	r0, [pc, #372]	; (8001634 <main+0xbdc>)
 80014be:	f001 fa87 	bl	80029d0 <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0d5      	beq.n	8001474 <main+0xa1c>
								}
							}
							HAL_Delay(20);
 80014c8:	2014      	movs	r0, #20
 80014ca:	f000 ff35 	bl	8002338 <HAL_Delay>
			for(int i = 0;i < 3;i ++){
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	3301      	adds	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f77f aefd 	ble.w	80012d6 <main+0x87e>
					}
				}
			}

			//Display Now time
			for(uint32_t j = 0;j < 8;j ++){
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e008      	b.n	80014f4 <main+0xa9c>
				buf[j] = DuanMa[10];
 80014e2:	4b51      	ldr	r3, [pc, #324]	; (8001628 <main+0xbd0>)
 80014e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e6:	4951      	ldr	r1, [pc, #324]	; (800162c <main+0xbd4>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(uint32_t j = 0;j < 8;j ++){
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b07      	cmp	r3, #7
 80014f8:	d9f3      	bls.n	80014e2 <main+0xa8a>
			}
			for(int i = 0;i < 3;i ++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	e041      	b.n	8001584 <main+0xb2c>
				Write_Buff(3*i, 3*i+2, (Time_Select[i] % 10)*10 + (Time_Select[i] -(Time_Select[i] % 10))/10);
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	461d      	mov	r5, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	3302      	adds	r3, #2
 8001514:	461e      	mov	r6, r3
 8001516:	4a48      	ldr	r2, [pc, #288]	; (8001638 <main+0xbe0>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4413      	add	r3, r2
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <main+0xbe4>)
 8001520:	fba3 1302 	umull	r1, r3, r3, r2
 8001524:	08d9      	lsrs	r1, r3, #3
 8001526:	460b      	mov	r3, r1
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4618      	mov	r0, r3
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <main+0xbe0>)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	461c      	mov	r4, r3
 8001548:	4a3b      	ldr	r2, [pc, #236]	; (8001638 <main+0xbe0>)
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4413      	add	r3, r2
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <main+0xbe4>)
 8001552:	fba3 1302 	umull	r1, r3, r3, r2
 8001556:	08d9      	lsrs	r1, r3, #3
 8001558:	460b      	mov	r3, r1
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	1ae3      	subs	r3, r4, r3
 8001566:	4a36      	ldr	r2, [pc, #216]	; (8001640 <main+0xbe8>)
 8001568:	fb82 1203 	smull	r1, r2, r2, r3
 800156c:	1092      	asrs	r2, r2, #2
 800156e:	17db      	asrs	r3, r3, #31
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	4403      	add	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4631      	mov	r1, r6
 8001578:	4628      	mov	r0, r5
 800157a:	f7ff f9e3 	bl	8000944 <Write_Buff>
			for(int i = 0;i < 3;i ++){
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	3301      	adds	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b02      	cmp	r3, #2
 8001588:	ddba      	ble.n	8001500 <main+0xaa8>
			}
			Change_BUFF(3, 18);
 800158a:	2112      	movs	r1, #18
 800158c:	2003      	movs	r0, #3
 800158e:	f7ff f961 	bl	8000854 <Change_BUFF>
			Change_BUFF(6, 18);
 8001592:	2112      	movs	r1, #18
 8001594:	2006      	movs	r0, #6
 8001596:	f7ff f95d 	bl	8000854 <Change_BUFF>
			Display_Buff();
 800159a:	f7ff fa0b 	bl	80009b4 <Display_Buff>
			//Return To "Display RTC"
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 800159e:	2101      	movs	r1, #1
 80015a0:	4828      	ldr	r0, [pc, #160]	; (8001644 <main+0xbec>)
 80015a2:	f001 fa15 	bl	80029d0 <HAL_GPIO_ReadPin>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d04d      	beq.n	8001648 <main+0xbf0>
				 HAL_Delay(20);
 80015ac:	2014      	movs	r0, #20
 80015ae:	f000 fec3 	bl	8002338 <HAL_Delay>
				 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 80015b2:	2101      	movs	r1, #1
 80015b4:	4823      	ldr	r0, [pc, #140]	; (8001644 <main+0xbec>)
 80015b6:	f001 fa0b 	bl	80029d0 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d043      	beq.n	8001648 <main+0xbf0>
					Flag = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	67fb      	str	r3, [r7, #124]	; 0x7c
					Change_Time_Flag = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	667b      	str	r3, [r7, #100]	; 0x64
					RTC_SetMy_Time(Time_Select[0],Time_Select[1],Time_Select[2],RTC_FORMAT_BIN);
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <main+0xbe0>)
 80015ca:	7818      	ldrb	r0, [r3, #0]
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <main+0xbe0>)
 80015ce:	7859      	ldrb	r1, [r3, #1]
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <main+0xbe0>)
 80015d2:	789a      	ldrb	r2, [r3, #2]
 80015d4:	2300      	movs	r3, #0
 80015d6:	f7ff fa15 	bl	8000a04 <RTC_SetMy_Time>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 80015da:	e019      	b.n	8001610 <main+0xbb8>
						for(uint32_t j = 0;j < 8;j ++){
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e013      	b.n	800160a <main+0xbb2>
							buf[j] = DuanMa[10];
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <main+0xbd0>)
 80015e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e6:	4911      	ldr	r1, [pc, #68]	; (800162c <main+0xbd4>)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
							Change_BUFF(j+1, 18);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	2112      	movs	r1, #18
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff f92d 	bl	8000854 <Change_BUFF>
							Display_Buff();
 80015fa:	f7ff f9db 	bl	80009b4 <Display_Buff>
							HAL_Delay(1);
 80015fe:	2001      	movs	r0, #1
 8001600:	f000 fe9a 	bl	8002338 <HAL_Delay>
						for(uint32_t j = 0;j < 8;j ++){
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3301      	adds	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b07      	cmp	r3, #7
 800160e:	d9e8      	bls.n	80015e2 <main+0xb8a>
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8001610:	2101      	movs	r1, #1
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <main+0xbec>)
 8001614:	f001 f9dc 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1de      	bne.n	80015dc <main+0xb84>
						}
					}
					HAL_Delay(20);
 800161e:	2014      	movs	r0, #20
 8001620:	f000 fe8a 	bl	8002338 <HAL_Delay>
					break;
 8001624:	e014      	b.n	8001650 <main+0xbf8>
 8001626:	bf00      	nop
 8001628:	20000000 	.word	0x20000000
 800162c:	200000dc 	.word	0x200000dc
 8001630:	40020800 	.word	0x40020800
 8001634:	40020c00 	.word	0x40020c00
 8001638:	200000d8 	.word	0x200000d8
 800163c:	cccccccd 	.word	0xcccccccd
 8001640:	66666667 	.word	0x66666667
 8001644:	40020000 	.word	0x40020000
		while(Change_Time_Flag){
 8001648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f adc1 	bne.w	80011d2 <main+0x77a>
				 }
			}
		}
		Write_Buff(0, 2, (Nowtime.Hours % 10)*10 + (Nowtime.Hours -(Nowtime.Hours % 10))/10);
 8001650:	4b76      	ldr	r3, [pc, #472]	; (800182c <main+0xdd4>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b76      	ldr	r3, [pc, #472]	; (8001830 <main+0xdd8>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	08d9      	lsrs	r1, r3, #3
 800165c:	460b      	mov	r3, r1
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4618      	mov	r0, r3
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <main+0xdd4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461c      	mov	r4, r3
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <main+0xdd4>)
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <main+0xdd8>)
 8001680:	fba3 1302 	umull	r1, r3, r3, r2
 8001684:	08d9      	lsrs	r1, r3, #3
 8001686:	460b      	mov	r3, r1
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	1ae3      	subs	r3, r4, r3
 8001694:	4a67      	ldr	r2, [pc, #412]	; (8001834 <main+0xddc>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1092      	asrs	r2, r2, #2
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4403      	add	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	2102      	movs	r1, #2
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff f94c 	bl	8000944 <Write_Buff>
		Write_Buff(3, 5, (Nowtime.Minutes % 10)*10 + (Nowtime.Minutes -(Nowtime.Minutes % 10))/10);
 80016ac:	4b5f      	ldr	r3, [pc, #380]	; (800182c <main+0xdd4>)
 80016ae:	785a      	ldrb	r2, [r3, #1]
 80016b0:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <main+0xdd8>)
 80016b2:	fba3 1302 	umull	r1, r3, r3, r2
 80016b6:	08d9      	lsrs	r1, r3, #3
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4618      	mov	r0, r3
 80016d0:	4b56      	ldr	r3, [pc, #344]	; (800182c <main+0xdd4>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	461c      	mov	r4, r3
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <main+0xdd4>)
 80016d8:	785a      	ldrb	r2, [r3, #1]
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <main+0xdd8>)
 80016dc:	fba3 1302 	umull	r1, r3, r3, r2
 80016e0:	08d9      	lsrs	r1, r3, #3
 80016e2:	460b      	mov	r3, r1
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	1ae3      	subs	r3, r4, r3
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <main+0xddc>)
 80016f2:	fb82 1203 	smull	r1, r2, r2, r3
 80016f6:	1092      	asrs	r2, r2, #2
 80016f8:	17db      	asrs	r3, r3, #31
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	4403      	add	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	2105      	movs	r1, #5
 8001702:	2003      	movs	r0, #3
 8001704:	f7ff f91e 	bl	8000944 <Write_Buff>
		Write_Buff(6, 8, (Nowtime.Seconds % 10)*10 + (Nowtime.Seconds -(Nowtime.Seconds % 10))/10);
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <main+0xdd4>)
 800170a:	789a      	ldrb	r2, [r3, #2]
 800170c:	4b48      	ldr	r3, [pc, #288]	; (8001830 <main+0xdd8>)
 800170e:	fba3 1302 	umull	r1, r3, r3, r2
 8001712:	08d9      	lsrs	r1, r3, #3
 8001714:	460b      	mov	r3, r1
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4618      	mov	r0, r3
 800172c:	4b3f      	ldr	r3, [pc, #252]	; (800182c <main+0xdd4>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	461c      	mov	r4, r3
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <main+0xdd4>)
 8001734:	789a      	ldrb	r2, [r3, #2]
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <main+0xdd8>)
 8001738:	fba3 1302 	umull	r1, r3, r3, r2
 800173c:	08d9      	lsrs	r1, r3, #3
 800173e:	460b      	mov	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	1ae3      	subs	r3, r4, r3
 800174c:	4a39      	ldr	r2, [pc, #228]	; (8001834 <main+0xddc>)
 800174e:	fb82 1203 	smull	r1, r2, r2, r3
 8001752:	1092      	asrs	r2, r2, #2
 8001754:	17db      	asrs	r3, r3, #31
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4403      	add	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	2108      	movs	r1, #8
 800175e:	2006      	movs	r0, #6
 8001760:	f7ff f8f0 	bl	8000944 <Write_Buff>
		Change_BUFF(3, 18);
 8001764:	2112      	movs	r1, #18
 8001766:	2003      	movs	r0, #3
 8001768:	f7ff f874 	bl	8000854 <Change_BUFF>
		Change_BUFF(6, 18);
 800176c:	2112      	movs	r1, #18
 800176e:	2006      	movs	r0, #6
 8001770:	f7ff f870 	bl	8000854 <Change_BUFF>
		Display_Buff();
 8001774:	f7ff f91e 	bl	80009b4 <Display_Buff>
		//Key0: Go To Change Mode
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8001778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800177c:	482e      	ldr	r0, [pc, #184]	; (8001838 <main+0xde0>)
 800177e:	f001 f927 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d132      	bne.n	80017ee <main+0xd96>
			HAL_Delay(20);
 8001788:	2014      	movs	r0, #20
 800178a:	f000 fdd5 	bl	8002338 <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 800178e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <main+0xde0>)
 8001794:	f001 f91c 	bl	80029d0 <HAL_GPIO_ReadPin>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d127      	bne.n	80017ee <main+0xd96>
				Change_Time_Flag = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	667b      	str	r3, [r7, #100]	; 0x64
				while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80017a2:	e019      	b.n	80017d8 <main+0xd80>
					for(uint32_t j = 0;j < 8;j ++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	e013      	b.n	80017d2 <main+0xd7a>
						buf[j] = DuanMa[10];
 80017aa:	4b24      	ldr	r3, [pc, #144]	; (800183c <main+0xde4>)
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	4924      	ldr	r1, [pc, #144]	; (8001840 <main+0xde8>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						Change_BUFF(j+1, 18);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3301      	adds	r3, #1
 80017ba:	2112      	movs	r1, #18
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f849 	bl	8000854 <Change_BUFF>
						Display_Buff();
 80017c2:	f7ff f8f7 	bl	80009b4 <Display_Buff>
						HAL_Delay(1);
 80017c6:	2001      	movs	r0, #1
 80017c8:	f000 fdb6 	bl	8002338 <HAL_Delay>
					for(uint32_t j = 0;j < 8;j ++){
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	3301      	adds	r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d9e8      	bls.n	80017aa <main+0xd52>
				while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 80017d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <main+0xde0>)
 80017de:	f001 f8f7 	bl	80029d0 <HAL_GPIO_ReadPin>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0dd      	beq.n	80017a4 <main+0xd4c>
					}
				}
				HAL_Delay(20);
 80017e8:	2014      	movs	r0, #20
 80017ea:	f000 fda5 	bl	8002338 <HAL_Delay>
			}
		}
		//WK-Up:Clear
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 80017ee:	2101      	movs	r1, #1
 80017f0:	4814      	ldr	r0, [pc, #80]	; (8001844 <main+0xdec>)
 80017f2:	f001 f8ed 	bl	80029d0 <HAL_GPIO_ReadPin>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d011      	beq.n	8001820 <main+0xdc8>
			 HAL_Delay(20);
 80017fc:	2014      	movs	r0, #20
 80017fe:	f000 fd9b 	bl	8002338 <HAL_Delay>
			 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET){
 8001802:	2101      	movs	r1, #1
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <main+0xdec>)
 8001806:	f001 f8e3 	bl	80029d0 <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <main+0xdc8>
				 RTC_Clock_Flag = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	66bb      	str	r3, [r7, #104]	; 0x68
				 Flag = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	67fb      	str	r3, [r7, #124]	; 0x7c
				 key1 = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				 break;
 800181e:	e003      	b.n	8001828 <main+0xdd0>
	while(RTC_Clock_Flag){
 8001820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f acbe 	bne.w	80011a4 <main+0x74c>
	HAL_RTC_GetTime(&hrtc, &Nowtime, RTC_FORMAT_BIN);
 8001828:	f7ff b947 	b.w	8000aba <main+0x62>
 800182c:	20000228 	.word	0x20000228
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	66666667 	.word	0x66666667
 8001838:	40020800 	.word	0x40020800
 800183c:	20000000 	.word	0x20000000
 8001840:	200000dc 	.word	0x200000dc
 8001844:	40020000 	.word	0x40020000

08001848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b094      	sub	sp, #80	; 0x50
 800184c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184e:	f107 0320 	add.w	r3, r7, #32
 8001852:	2230      	movs	r2, #48	; 0x30
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fcd8 	bl	800520c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <SystemClock_Config+0xcc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a27      	ldr	r2, [pc, #156]	; (8001914 <SystemClock_Config+0xcc>)
 8001876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <SystemClock_Config+0xcc>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <SystemClock_Config+0xd0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <SystemClock_Config+0xd0>)
 8001892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <SystemClock_Config+0xd0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018a4:	230a      	movs	r3, #10
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ac:	2310      	movs	r3, #16
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018c0:	2364      	movs	r3, #100	; 0x64
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 0320 	add.w	r3, r7, #32
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f8af 	bl	8002a34 <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018dc:	f000 faaa 	bl	8001e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e0:	230f      	movs	r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2302      	movs	r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2103      	movs	r1, #3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 fb11 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001908:	f000 fa94 	bl	8001e34 <Error_Handler>
  }
}
 800190c:	bf00      	nop
 800190e:	3750      	adds	r7, #80	; 0x50
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40007000 	.word	0x40007000

0800191c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001930:	2300      	movs	r3, #0
 8001932:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <MX_RTC_Init+0xac>)
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <MX_RTC_Init+0xb0>)
 8001938:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_RTC_Init+0xac>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_RTC_Init+0xac>)
 8001942:	227f      	movs	r2, #127	; 0x7f
 8001944:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_RTC_Init+0xac>)
 8001948:	22ff      	movs	r2, #255	; 0xff
 800194a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <MX_RTC_Init+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_RTC_Init+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_RTC_Init+0xac>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800195e:	481a      	ldr	r0, [pc, #104]	; (80019c8 <MX_RTC_Init+0xac>)
 8001960:	f001 fda0 	bl	80034a4 <HAL_RTC_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800196a:	f000 fa63 	bl	8001e34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 800196e:	2316      	movs	r3, #22
 8001970:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x36;
 8001972:	2336      	movs	r3, #54	; 0x36
 8001974:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8001976:	2330      	movs	r3, #48	; 0x30
 8001978:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <MX_RTC_Init+0xac>)
 800198a:	f001 fe1c 	bl	80035c6 <HAL_RTC_SetTime>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001994:	f000 fa4e 	bl	8001e34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001998:	2305      	movs	r3, #5
 800199a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 800199c:	2312      	movs	r3, #18
 800199e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x17;
 80019a0:	2317      	movs	r3, #23
 80019a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80019a4:	2321      	movs	r3, #33	; 0x21
 80019a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	2201      	movs	r2, #1
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <MX_RTC_Init+0xac>)
 80019b0:	f001 ff24 	bl	80037fc <HAL_RTC_SetDate>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80019ba:	f000 fa3b 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200001c0 	.word	0x200001c0
 80019cc:	40002800 	.word	0x40002800

080019d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019ee:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <MX_TIM1_Init+0x9c>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019f4:	2263      	movs	r2, #99	; 0x63
 80019f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <MX_TIM1_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4813      	ldr	r0, [pc, #76]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a1a:	f002 f875 	bl	8003b08 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 fa06 	bl	8001e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4619      	mov	r1, r3
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a36:	f002 f9be 	bl	8003db6 <HAL_TIM_ConfigClockSource>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a40:	f000 f9f8 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_TIM1_Init+0x98>)
 8001a52:	f002 fbb9 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a5c:	f000 f9ea 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200001e0 	.word	0x200001e0
 8001a6c:	40010000 	.word	0x40010000

08001a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001a96:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001aa4:	f241 3287 	movw	r2, #4999	; 0x1387
 8001aa8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001ab8:	f002 f826 	bl	8003b08 <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ac2:	f000 f9b7 	bl	8001e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001ad4:	f002 f96f 	bl	8003db6 <HAL_TIM_ConfigClockSource>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ade:	f000 f9a9 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM2_Init+0x98>)
 8001af0:	f002 fb6a 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001afa:	f000 f99b 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000023c 	.word	0x2000023c

08001b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	463b      	mov	r3, r7
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <MX_TIM4_Init+0x98>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 8001b2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b30:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b44:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b52:	f001 ffd9 	bl	8003b08 <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b5c:	f000 f96a 	bl	8001e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b6e:	f002 f922 	bl	8003db6 <HAL_TIM_ConfigClockSource>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b78:	f000 f95c 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_TIM4_Init+0x94>)
 8001b8a:	f002 fb1d 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b94:	f000 f94e 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000124 	.word	0x20000124
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MX_USART1_UART_Init+0x50>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f002 fb74 	bl	80042cc <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bea:	f000 f923 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000174 	.word	0x20000174
 8001bf8:	40011000 	.word	0x40011000

08001bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a46      	ldr	r2, [pc, #280]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a3f      	ldr	r2, [pc, #252]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a31      	ldr	r2, [pc, #196]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <MX_GPIO_Init+0x154>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f641 41ff 	movw	r1, #7423	; 0x1cff
 8001ca4:	482b      	ldr	r0, [pc, #172]	; (8001d54 <MX_GPIO_Init+0x158>)
 8001ca6:	f000 feab 	bl	8002a00 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |GPO_HC138_A0_Pin|GPO_HC138_A1_Pin|GPO_HC138_A2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_HC595_DS_Pin|GPO_HC595_STCP_Pin|GPO_HC595_SHCP_Pin|BEEP_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001cb0:	4829      	ldr	r0, [pc, #164]	; (8001d58 <MX_GPIO_Init+0x15c>)
 8001cb2:	f000 fea5 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbc:	4826      	ldr	r0, [pc, #152]	; (8001d58 <MX_GPIO_Init+0x15c>)
 8001cbe:	f000 fe9f 	bl	8002a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           GPO_HC138_A0_Pin GPO_HC138_A1_Pin GPO_HC138_A2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001cc2:	f641 43ff 	movw	r3, #7423	; 0x1cff
 8001cc6:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |GPO_HC138_A0_Pin|GPO_HC138_A1_Pin|GPO_HC138_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	481e      	ldr	r0, [pc, #120]	; (8001d54 <MX_GPIO_Init+0x158>)
 8001cdc:	f000 fcf4 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481a      	ldr	r0, [pc, #104]	; (8001d5c <MX_GPIO_Init+0x160>)
 8001cf4:	f000 fce8 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8001cf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <MX_GPIO_Init+0x158>)
 8001d0e:	f000 fcdb 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8001d12:	2304      	movs	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <MX_GPIO_Init+0x164>)
 8001d26:	f000 fccf 	bl	80026c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPO_HC595_DS_Pin GPO_HC595_STCP_Pin GPO_HC595_SHCP_Pin BEEP_Pin
                           PB9 */
  GPIO_InitStruct.Pin = GPO_HC595_DS_Pin|GPO_HC595_STCP_Pin|GPO_HC595_SHCP_Pin|BEEP_Pin
 8001d2a:	f44f 734e 	mov.w	r3, #824	; 0x338
 8001d2e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_GPIO_Init+0x15c>)
 8001d44:	f000 fcc0 	bl	80026c8 <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <_write>:

/* USER CODE BEGIN 4 */
__attribute__((weak)) int _write(int file, char *ptr, int len){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart1,ptr,len,0xffff) != HAL_OK){
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <_write+0x30>)
 8001d7c:	f002 faf3 	bl	8004366 <HAL_UART_Transmit>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <_write+0x26>
		Error_Handler();
 8001d86:	f000 f855 	bl	8001e34 <Error_Handler>
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000174 	.word	0x20000174

08001d98 <HAL_TIM_PeriodElapsedCallback>:
//定时器Tim2展示程序正在运行
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d98:	b5b0      	push	{r4, r5, r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af04      	add	r7, sp, #16
 8001d9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d114      	bne.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		static uint8_t status = 0;
		GPIOC->ODR = ~(0x01<<status);
 8001daa:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	4093      	lsls	r3, r2
 8001db4:	43da      	mvns	r2, r3
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001db8:	615a      	str	r2, [r3, #20]
		//HAL_GPIO_TogglePin(GPIOC, (0x01<<status));
		status ++;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dc4:	701a      	strb	r2, [r3, #0]
		status %= 8;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dd2:	701a      	strb	r2, [r3, #0]

	}
	if(htim->Instance == TIM4){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d119      	bne.n	8001e12 <HAL_TIM_PeriodElapsedCallback+0x7a>
		printf("Now Time :%d-%d-%d  %d:%d:%d \r\n",Nowdate.Year,Nowdate.Month,Nowdate.Date,Nowtime.Hours,Nowtime.Minutes,Nowtime.Seconds);
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001de0:	78db      	ldrb	r3, [r3, #3]
 8001de2:	4618      	mov	r0, r3
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001de6:	785b      	ldrb	r3, [r3, #1]
 8001de8:	461c      	mov	r4, r3
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	461d      	mov	r5, r3
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	9101      	str	r1, [sp, #4]
 8001e04:	9200      	str	r2, [sp, #0]
 8001e06:	462b      	mov	r3, r5
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4601      	mov	r1, r0
 8001e0c:	4808      	ldr	r0, [pc, #32]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e0e:	f003 fa05 	bl	800521c <iprintf>
	}
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000fc 	.word	0x200000fc
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40000800 	.word	0x40000800
 8001e28:	20000284 	.word	0x20000284
 8001e2c:	20000228 	.word	0x20000228
 8001e30:	08006170 	.word	0x08006170

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <Error_Handler+0x8>
	...

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_RTC_MspInit+0x50>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RTC_MspInit+0x48>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 f9fe 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ece:	f7ff ffb1 	bl	8001e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_RTC_MspInit+0x54>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40002800 	.word	0x40002800
 8001ee4:	42470e3c 	.word	0x42470e3c

08001ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_TIM_Base_MspInit+0xa8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a24      	ldr	r2, [pc, #144]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f16:	e036      	b.n	8001f86 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d116      	bne.n	8001f50 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	201c      	movs	r0, #28
 8001f44:	f000 faf7 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f48:	201c      	movs	r0, #28
 8001f4a:	f000 fb10 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 8001f4e:	e01a      	b.n	8001f86 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <HAL_TIM_Base_MspInit+0xb0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d115      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_TIM_Base_MspInit+0xac>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	201e      	movs	r0, #30
 8001f7c:	f000 fadb 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f80:	201e      	movs	r0, #30
 8001f82:	f000 faf4 	bl	800256e <HAL_NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40000800 	.word	0x40000800

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_UART_MspInit+0x94>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d134      	bne.n	8002028 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_UART_MspInit+0x98>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ff6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002004:	2303      	movs	r3, #3
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002008:	2307      	movs	r3, #7
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_UART_MspInit+0x9c>)
 8002014:	f000 fb58 	bl	80026c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2025      	movs	r0, #37	; 0x25
 800201e:	f000 fa8a 	bl	8002536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002022:	2025      	movs	r0, #37	; 0x25
 8002024:	f000 faa3 	bl	800256e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40011000 	.word	0x40011000
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002088:	f000 f936 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}

08002090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM2_IRQHandler+0x10>)
 8002096:	f001 fd86 	bl	8003ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000023c 	.word	0x2000023c

080020a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM4_IRQHandler+0x10>)
 80020aa:	f001 fd7c 	bl	8003ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000124 	.word	0x20000124

080020b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <USART1_IRQHandler+0x10>)
 80020be:	f002 f9e5 	bl	800448c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000174 	.word	0x20000174

080020cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
	}

return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f002 fffc 	bl	800519c <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000100 	.word	0x20000100
 80021d8:	200002a0 	.word	0x200002a0

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002238 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002206:	490e      	ldr	r1, [pc, #56]	; (8002240 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002208:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800221c:	4c0b      	ldr	r4, [pc, #44]	; (800224c <LoopFillZerobss+0x26>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800222a:	f7ff ffd7 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222e:	f002 ffbb 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002232:	f7fe fc11 	bl	8000a58 <main>
  bx  lr    
 8002236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800223c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002240:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002244:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 8002248:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800224c:	2000029c 	.word	0x2000029c

08002250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002250:	e7fe      	b.n	8002250 <ADC_IRQHandler>
	...

08002254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_Init+0x40>)
 800225e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_Init+0x40>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_Init+0x40>)
 8002276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800227c:	2003      	movs	r0, #3
 800227e:	f000 f94f 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 f808 	bl	8002298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002288:	f7ff fdda 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_InitTick+0x54>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_InitTick+0x58>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f967 	bl	800258a <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f000 f92f 	bl	8002536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <HAL_InitTick+0x5c>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000004c 	.word	0x2000004c
 80022f0:	20000054 	.word	0x20000054
 80022f4:	20000050 	.word	0x20000050

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000054 	.word	0x20000054
 800231c:	20000288 	.word	0x20000288

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000288 	.word	0x20000288

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000054 	.word	0x20000054

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d301      	bcc.n	80024f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00f      	b.n	8002512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <SysTick_Config+0x40>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fa:	210f      	movs	r1, #15
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f7ff ff8e 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x40>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x40>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff29 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002548:	f7ff ff3e 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 800254c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	6978      	ldr	r0, [r7, #20]
 8002554:	f7ff ff8e 	bl	8002474 <NVIC_EncodePriority>
 8002558:	4602      	mov	r2, r0
 800255a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255e:	4611      	mov	r1, r2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff31 	bl	80023e4 <__NVIC_EnableIRQ>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffa2 	bl	80024dc <SysTick_Config>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025b0:	f7ff feb6 	bl	8002320 <HAL_GetTick>
 80025b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d008      	beq.n	80025d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e052      	b.n	800267a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0216 	bic.w	r2, r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <HAL_DMA_Abort+0x62>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0208 	bic.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002624:	e013      	b.n	800264e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002626:	f7ff fe7b 	bl	8002320 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b05      	cmp	r3, #5
 8002632:	d90c      	bls.n	800264e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e015      	b.n	800267a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e4      	bne.n	8002626 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	223f      	movs	r2, #63	; 0x3f
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e00c      	b.n	80026ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2205      	movs	r2, #5
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e159      	b.n	8002998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	f040 8148 	bne.w	8002992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d005      	beq.n	800271a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	2b02      	cmp	r3, #2
 8002718:	d130      	bne.n	800277c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	2203      	movs	r2, #3
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	f003 0201 	and.w	r2, r3, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b03      	cmp	r3, #3
 8002786:	d017      	beq.n	80027b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d123      	bne.n	800280c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	08da      	lsrs	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3208      	adds	r2, #8
 80027cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	220f      	movs	r2, #15
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	69b9      	ldr	r1, [r7, #24]
 8002808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	2203      	movs	r2, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0203 	and.w	r2, r3, #3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a2 	beq.w	8002992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_GPIO_Init+0x2e8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800286a:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3302      	adds	r3, #2
 8002872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	220f      	movs	r2, #15
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <HAL_GPIO_Init+0x2f0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d019      	beq.n	80028ca <HAL_GPIO_Init+0x202>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a48      	ldr	r2, [pc, #288]	; (80029bc <HAL_GPIO_Init+0x2f4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d013      	beq.n	80028c6 <HAL_GPIO_Init+0x1fe>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_GPIO_Init+0x2f8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00d      	beq.n	80028c2 <HAL_GPIO_Init+0x1fa>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <HAL_GPIO_Init+0x2fc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <HAL_GPIO_Init+0x1f6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a45      	ldr	r2, [pc, #276]	; (80029c8 <HAL_GPIO_Init+0x300>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d101      	bne.n	80028ba <HAL_GPIO_Init+0x1f2>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e008      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ba:	2307      	movs	r3, #7
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028be:	2303      	movs	r3, #3
 80028c0:	e004      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e002      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_GPIO_Init+0x204>
 80028ca:	2300      	movs	r3, #0
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	f002 0203 	and.w	r2, r2, #3
 80028d2:	0092      	lsls	r2, r2, #2
 80028d4:	4093      	lsls	r3, r2
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028dc:	4935      	ldr	r1, [pc, #212]	; (80029b4 <HAL_GPIO_Init+0x2ec>)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	089b      	lsrs	r3, r3, #2
 80028e2:	3302      	adds	r3, #2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_GPIO_Init+0x304>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800290e:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_GPIO_Init+0x304>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <HAL_GPIO_Init+0x304>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_GPIO_Init+0x304>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_GPIO_Init+0x304>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3301      	adds	r3, #1
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	f67f aea2 	bls.w	80026e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	bf00      	nop
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020000 	.word	0x40020000
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40020800 	.word	0x40020800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e001      	b.n	80029f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a10:	787b      	ldrb	r3, [r7, #1]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a1c:	e003      	b.n	8002a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	041a      	lsls	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e264      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	4ba3      	ldr	r3, [pc, #652]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e23f      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a8a      	ldr	r2, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a87      	ldr	r2, [pc, #540]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a83      	ldr	r2, [pc, #524]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff fc18 	bl	8002320 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff fc14 	bl	8002320 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e204      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff fc04 	bl	8002320 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff fc00 	bl	8002320 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f0      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c4      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4952      	ldr	r1, [pc, #328]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_OscConfig+0x2b0>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff fbb9 	bl	8002320 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff fbb5 	bl	8002320 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a5      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4940      	ldr	r1, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <HAL_RCC_OscConfig+0x2b0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff fb98 	bl	8002320 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff fb94 	bl	8002320 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e184      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d030      	beq.n	8002c80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_OscConfig+0x2b4>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7ff fb78 	bl	8002320 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff fb74 	bl	8002320 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e164      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e015      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_OscConfig+0x2b4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff fb61 	bl	8002320 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7ff fb5d 	bl	8002320 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e14d      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a0 	beq.w	8002dce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7ff fb23 	bl	8002320 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e011      	b.n	8002d02 <HAL_RCC_OscConfig+0x2ce>
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
 8002cec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7ff fb16 	bl	8002320 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e106      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_RCC_OscConfig+0x4e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x312>
 8002d2c:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a7a      	ldr	r2, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x32a>
 8002d46:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a74      	ldr	r2, [pc, #464]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a71      	ldr	r2, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7ff fadb 	bl	8002320 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7ff fad7 	bl	8002320 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0c5      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x33a>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7ff fac5 	bl	8002320 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7ff fac1 	bl	8002320 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0af      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 809b 	beq.w	8002f0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d05c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d141      	bne.n	8002e70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7ff fa95 	bl	8002320 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7ff fa91 	bl	8002320 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e081      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	019b      	lsls	r3, r3, #6
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7ff fa6a 	bl	8002320 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7ff fa66 	bl	8002320 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e056      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x41c>
 8002e6e:	e04e      	b.n	8002f0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7ff fa53 	bl	8002320 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff fa4f 	bl	8002320 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03f      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x44a>
 8002e9c:	e037      	b.n	8002f0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e032      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d028      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d121      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d11a      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d111      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470060 	.word	0x42470060

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7ff f984 	bl	8002320 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7ff f980 	bl	8002320 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f8e4 	bl	8002298 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08006190 	.word	0x08006190
 80030e8:	2000004c 	.word	0x2000004c
 80030ec:	20000050 	.word	0x20000050

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f6:	2100      	movs	r1, #0
 80030f8:	6079      	str	r1, [r7, #4]
 80030fa:	2100      	movs	r1, #0
 80030fc:	60f9      	str	r1, [r7, #12]
 80030fe:	2100      	movs	r1, #0
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003102:	2100      	movs	r1, #0
 8003104:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003106:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 8003108:	6889      	ldr	r1, [r1, #8]
 800310a:	f001 010c 	and.w	r1, r1, #12
 800310e:	2908      	cmp	r1, #8
 8003110:	d00d      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x3e>
 8003112:	2908      	cmp	r1, #8
 8003114:	f200 8094 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x150>
 8003118:	2900      	cmp	r1, #0
 800311a:	d002      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x32>
 800311c:	2904      	cmp	r1, #4
 800311e:	d003      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x38>
 8003120:	e08e      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003122:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_GetSysClockFreq+0x164>)
 8003124:	60bb      	str	r3, [r7, #8]
       break;
 8003126:	e08e      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_RCC_GetSysClockFreq+0x168>)
 800312a:	60bb      	str	r3, [r7, #8]
      break;
 800312c:	e08b      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800312e:	4948      	ldr	r1, [pc, #288]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 8003130:	6849      	ldr	r1, [r1, #4]
 8003132:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003136:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003138:	4945      	ldr	r1, [pc, #276]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 800313a:	6849      	ldr	r1, [r1, #4]
 800313c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003140:	2900      	cmp	r1, #0
 8003142:	d024      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003144:	4942      	ldr	r1, [pc, #264]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 8003146:	6849      	ldr	r1, [r1, #4]
 8003148:	0989      	lsrs	r1, r1, #6
 800314a:	4608      	mov	r0, r1
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003154:	f04f 0500 	mov.w	r5, #0
 8003158:	ea00 0204 	and.w	r2, r0, r4
 800315c:	ea01 0305 	and.w	r3, r1, r5
 8003160:	493d      	ldr	r1, [pc, #244]	; (8003258 <HAL_RCC_GetSysClockFreq+0x168>)
 8003162:	fb01 f003 	mul.w	r0, r1, r3
 8003166:	2100      	movs	r1, #0
 8003168:	fb01 f102 	mul.w	r1, r1, r2
 800316c:	1844      	adds	r4, r0, r1
 800316e:	493a      	ldr	r1, [pc, #232]	; (8003258 <HAL_RCC_GetSysClockFreq+0x168>)
 8003170:	fba2 0101 	umull	r0, r1, r2, r1
 8003174:	1863      	adds	r3, r4, r1
 8003176:	4619      	mov	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd f87e 	bl	8000280 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e04a      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	461a      	mov	r2, r3
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800319e:	f04f 0100 	mov.w	r1, #0
 80031a2:	ea02 0400 	and.w	r4, r2, r0
 80031a6:	ea03 0501 	and.w	r5, r3, r1
 80031aa:	4620      	mov	r0, r4
 80031ac:	4629      	mov	r1, r5
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	014b      	lsls	r3, r1, #5
 80031b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031bc:	0142      	lsls	r2, r0, #5
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	1b00      	subs	r0, r0, r4
 80031c4:	eb61 0105 	sbc.w	r1, r1, r5
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	018b      	lsls	r3, r1, #6
 80031d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031d6:	0182      	lsls	r2, r0, #6
 80031d8:	1a12      	subs	r2, r2, r0
 80031da:	eb63 0301 	sbc.w	r3, r3, r1
 80031de:	f04f 0000 	mov.w	r0, #0
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	00d9      	lsls	r1, r3, #3
 80031e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ec:	00d0      	lsls	r0, r2, #3
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	1912      	adds	r2, r2, r4
 80031f4:	eb45 0303 	adc.w	r3, r5, r3
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	0299      	lsls	r1, r3, #10
 8003202:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003206:	0290      	lsls	r0, r2, #10
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f7fd f832 	bl	8000280 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_GetSysClockFreq+0x160>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	60bb      	str	r3, [r7, #8]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_GetSysClockFreq+0x164>)
 8003242:	60bb      	str	r3, [r7, #8]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	68bb      	ldr	r3, [r7, #8]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bdb0      	pop	{r4, r5, r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	017d7840 	.word	0x017d7840

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2000004c 	.word	0x2000004c

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	080061a0 	.word	0x080061a0

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	080061a0 	.word	0x080061a0

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d038      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032f2:	f7ff f815 	bl	8002320 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032fa:	f7ff f811 	bl	8002320 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0bd      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	071b      	lsls	r3, r3, #28
 800332a:	495a      	ldr	r1, [pc, #360]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fff2 	bl	8002320 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003340:	f7fe ffee 	bl	8002320 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e09a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003352:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8083 	beq.w	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	4a47      	ldr	r2, [pc, #284]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337a:	6413      	str	r3, [r2, #64]	; 0x40
 800337c:	4b45      	ldr	r3, [pc, #276]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fe ffc4 	bl	8002320 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fe ffc0 	bl	8002320 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e06c      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033ae:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ba:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d02f      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d028      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d8:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e8:	4b2c      	ldr	r3, [pc, #176]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033ee:	4a29      	ldr	r2, [pc, #164]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d114      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe ff8e 	bl	8002320 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe ff8a 	bl	8002320 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e034      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d10d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	4911      	ldr	r1, [pc, #68]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
 8003452:	e005      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a0e      	ldr	r2, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7d1a      	ldrb	r2, [r3, #20]
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003484:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	42470068 	.word	0x42470068
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	42470e40 	.word	0x42470e40
 80034a0:	424711e0 	.word	0x424711e0

080034a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e083      	b.n	80035be <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7f5b      	ldrb	r3, [r3, #29]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d105      	bne.n	80034cc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fce2 	bl	8001e90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	22ca      	movs	r2, #202	; 0xca
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2253      	movs	r2, #83	; 0x53
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 faa8 	bl	8003a38 <RTC_EnterInitMode>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e05e      	b.n	80035be <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800350e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003512:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6919      	ldr	r1, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	041a      	lsls	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10e      	bne.n	800358c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa3a 	bl	80039e8 <HAL_RTC_WaitForSynchro>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2204      	movs	r2, #4
 8003586:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e018      	b.n	80035be <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	22ff      	movs	r2, #255	; 0xff
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80035bc:	2300      	movs	r3, #0
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035c6:	b590      	push	{r4, r7, lr}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_RTC_SetTime+0x1c>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0aa      	b.n	8003738 <HAL_RTC_SetTime+0x172>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d126      	bne.n	8003642 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2200      	movs	r2, #0
 8003606:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa3f 	bl	8003a90 <RTC_ByteToBcd2>
 8003612:	4603      	mov	r3, r0
 8003614:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	785b      	ldrb	r3, [r3, #1]
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fa38 	bl	8003a90 <RTC_ByteToBcd2>
 8003620:	4603      	mov	r3, r0
 8003622:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003624:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	789b      	ldrb	r3, [r3, #2]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fa30 	bl	8003a90 <RTC_ByteToBcd2>
 8003630:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003632:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	78db      	ldrb	r3, [r3, #3]
 800363a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e018      	b.n	8003674 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003662:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003668:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	78db      	ldrb	r3, [r3, #3]
 800366e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	22ca      	movs	r2, #202	; 0xca
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2253      	movs	r2, #83	; 0x53
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f9d7 	bl	8003a38 <RTC_EnterInitMode>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2204      	movs	r2, #4
 800369c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e047      	b.n	8003738 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036c6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d111      	bne.n	8003722 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f972 	bl	80039e8 <HAL_RTC_WaitForSynchro>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2204      	movs	r2, #4
 8003716:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00a      	b.n	8003738 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	22ff      	movs	r2, #255	; 0xff
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003736:	2300      	movs	r3, #0
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd90      	pop	{r4, r7, pc}

08003740 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003772:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003776:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11a      	bne.n	80037f2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f983 	bl	8003acc <RTC_Bcd2ToByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	785b      	ldrb	r3, [r3, #1]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f97a 	bl	8003acc <RTC_Bcd2ToByte>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	789b      	ldrb	r3, [r3, #2]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f971 	bl	8003acc <RTC_Bcd2ToByte>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	7f1b      	ldrb	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_RTC_SetDate+0x1c>
 8003814:	2302      	movs	r3, #2
 8003816:	e094      	b.n	8003942 <HAL_RTC_SetDate+0x146>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2202      	movs	r2, #2
 8003822:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10e      	bne.n	8003848 <HAL_RTC_SetDate+0x4c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	785b      	ldrb	r3, [r3, #1]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	d008      	beq.n	8003848 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	b2db      	uxtb	r3, r3
 8003840:	330a      	adds	r3, #10
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11c      	bne.n	8003888 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	78db      	ldrb	r3, [r3, #3]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f91c 	bl	8003a90 <RTC_ByteToBcd2>
 8003858:	4603      	mov	r3, r0
 800385a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f915 	bl	8003a90 <RTC_ByteToBcd2>
 8003866:	4603      	mov	r3, r0
 8003868:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800386a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	789b      	ldrb	r3, [r3, #2]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 f90d 	bl	8003a90 <RTC_ByteToBcd2>
 8003876:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003878:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e00e      	b.n	80038a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	78db      	ldrb	r3, [r3, #3]
 800388c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003894:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800389a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	22ca      	movs	r2, #202	; 0xca
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2253      	movs	r2, #83	; 0x53
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f8be 	bl	8003a38 <RTC_EnterInitMode>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2204      	movs	r2, #4
 80038ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e033      	b.n	8003942 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d111      	bne.n	800392c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f86d 	bl	80039e8 <HAL_RTC_WaitForSynchro>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2204      	movs	r2, #4
 8003920:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e00a      	b.n	8003942 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	22ff      	movs	r2, #255	; 0xff
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003940:	2300      	movs	r3, #0
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}

0800394a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003964:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003968:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398c:	b2da      	uxtb	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	0b5b      	lsrs	r3, r3, #13
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11a      	bne.n	80039de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f88d 	bl	8003acc <RTC_Bcd2ToByte>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	785b      	ldrb	r3, [r3, #1]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f884 	bl	8003acc <RTC_Bcd2ToByte>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	789b      	ldrb	r3, [r3, #2]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f87b 	bl	8003acc <RTC_Bcd2ToByte>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a02:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fc8c 	bl	8002320 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a0a:	e009      	b.n	8003a20 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a0c:	f7fe fc88 	bl	8002320 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a1a:	d901      	bls.n	8003a20 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e007      	b.n	8003a30 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ee      	beq.n	8003a0c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d119      	bne.n	8003a86 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fc60 	bl	8002320 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a62:	e009      	b.n	8003a78 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a64:	f7fe fc5c 	bl	8002320 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d901      	bls.n	8003a78 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e007      	b.n	8003a88 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ee      	beq.n	8003a64 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003a9e:	e005      	b.n	8003aac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	3b0a      	subs	r3, #10
 8003aaa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d8f6      	bhi.n	8003aa0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	b2db      	uxtb	r3, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e041      	b.n	8003b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe f9da 	bl	8001ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f000 fa24 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d122      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d11b      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f06f 0202 	mvn.w	r2, #2
 8003bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f9b5 	bl	8003f58 <HAL_TIM_IC_CaptureCallback>
 8003bee:	e005      	b.n	8003bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9a7 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9b8 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d122      	bne.n	8003c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d11b      	bne.n	8003c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0204 	mvn.w	r2, #4
 8003c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f98b 	bl	8003f58 <HAL_TIM_IC_CaptureCallback>
 8003c42:	e005      	b.n	8003c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f97d 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f98e 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d122      	bne.n	8003caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11b      	bne.n	8003caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0208 	mvn.w	r2, #8
 8003c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f961 	bl	8003f58 <HAL_TIM_IC_CaptureCallback>
 8003c96:	e005      	b.n	8003ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f953 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f964 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d122      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d11b      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f06f 0210 	mvn.w	r2, #16
 8003cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f937 	bl	8003f58 <HAL_TIM_IC_CaptureCallback>
 8003cea:	e005      	b.n	8003cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f929 	bl	8003f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f93a 	bl	8003f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d10e      	bne.n	8003d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f06f 0201 	mvn.w	r2, #1
 8003d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7fe f837 	bl	8001d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b80      	cmp	r3, #128	; 0x80
 8003d36:	d10e      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d107      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fab1 	bl	80042b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d10e      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d107      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8ff 	bl	8003f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d10e      	bne.n	8003dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0220 	mvn.w	r2, #32
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fa7b 	bl	80042a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_ConfigClockSource+0x1c>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0b4      	b.n	8003f3c <HAL_TIM_ConfigClockSource+0x186>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003df0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003df8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d03e      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0xd4>
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	f200 8087 	bhi.w	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	f000 8086 	beq.w	8003f28 <HAL_TIM_ConfigClockSource+0x172>
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d87f      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e22:	2b70      	cmp	r3, #112	; 0x70
 8003e24:	d01a      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0xa6>
 8003e26:	2b70      	cmp	r3, #112	; 0x70
 8003e28:	d87b      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e2a:	2b60      	cmp	r3, #96	; 0x60
 8003e2c:	d050      	beq.n	8003ed0 <HAL_TIM_ConfigClockSource+0x11a>
 8003e2e:	2b60      	cmp	r3, #96	; 0x60
 8003e30:	d877      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e32:	2b50      	cmp	r3, #80	; 0x50
 8003e34:	d03c      	beq.n	8003eb0 <HAL_TIM_ConfigClockSource+0xfa>
 8003e36:	2b50      	cmp	r3, #80	; 0x50
 8003e38:	d873      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d058      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0x13a>
 8003e3e:	2b40      	cmp	r3, #64	; 0x40
 8003e40:	d86f      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e42:	2b30      	cmp	r3, #48	; 0x30
 8003e44:	d064      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x15a>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d86b      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d060      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x15a>
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d867      	bhi.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d05c      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x15a>
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d05a      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5a:	e062      	b.n	8003f22 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f000 f98c 	bl	8004188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]
      break;
 8003e88:	e04f      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6899      	ldr	r1, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f000 f975 	bl	8004188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eac:	609a      	str	r2, [r3, #8]
      break;
 8003eae:	e03c      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f000 f8e9 	bl	8004094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2150      	movs	r1, #80	; 0x50
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f942 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003ece:	e02c      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	461a      	mov	r2, r3
 8003ede:	f000 f908 	bl	80040f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2160      	movs	r1, #96	; 0x60
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f932 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003eee:	e01c      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6859      	ldr	r1, [r3, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f000 f8c9 	bl	8004094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2140      	movs	r1, #64	; 0x40
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f922 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003f0e:	e00c      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f000 f919 	bl	8004152 <TIM_ITRx_SetConfig>
      break;
 8003f20:	e003      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e000      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a34      	ldr	r2, [pc, #208]	; (8004078 <TIM_Base_SetConfig+0xe4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00f      	beq.n	8003fcc <TIM_Base_SetConfig+0x38>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d00b      	beq.n	8003fcc <TIM_Base_SetConfig+0x38>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a31      	ldr	r2, [pc, #196]	; (800407c <TIM_Base_SetConfig+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <TIM_Base_SetConfig+0x38>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a30      	ldr	r2, [pc, #192]	; (8004080 <TIM_Base_SetConfig+0xec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_Base_SetConfig+0x38>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a2f      	ldr	r2, [pc, #188]	; (8004084 <TIM_Base_SetConfig+0xf0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <TIM_Base_SetConfig+0xe4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01b      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d017      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <TIM_Base_SetConfig+0xe8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <TIM_Base_SetConfig+0xec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a20      	ldr	r2, [pc, #128]	; (8004084 <TIM_Base_SetConfig+0xf0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <TIM_Base_SetConfig+0xf4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <TIM_Base_SetConfig+0xf8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <TIM_Base_SetConfig+0xfc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a08      	ldr	r2, [pc, #32]	; (8004078 <TIM_Base_SetConfig+0xe4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40014000 	.word	0x40014000
 800408c:	40014400 	.word	0x40014400
 8004090:	40014800 	.word	0x40014800

08004094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0201 	bic.w	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 030a 	bic.w	r3, r3, #10
 80040d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800411c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	031b      	lsls	r3, r3, #12
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800412e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	f043 0307 	orr.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e050      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d013      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a16      	ldr	r2, [pc, #88]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40010000 	.word	0x40010000
 8004294:	40000400 	.word	0x40000400
 8004298:	40000800 	.word	0x40000800
 800429c:	40000c00 	.word	0x40000c00
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e03f      	b.n	800435e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fd fe52 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	; 0x24
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fd7b 	bl	8004e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08a      	sub	sp, #40	; 0x28
 800436a:	af02      	add	r7, sp, #8
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b20      	cmp	r3, #32
 8004384:	d17c      	bne.n	8004480 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_Transmit+0x2c>
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e075      	b.n	8004482 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Transmit+0x3e>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e06e      	b.n	8004482 <HAL_UART_Transmit+0x11c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2221      	movs	r2, #33	; 0x21
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ba:	f7fd ffb1 	bl	8002320 <HAL_GetTick>
 80043be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	88fa      	ldrh	r2, [r7, #6]
 80043c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d108      	bne.n	80043e8 <HAL_UART_Transmit+0x82>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	e003      	b.n	80043f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f8:	e02a      	b.n	8004450 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 faf9 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e036      	b.n	8004482 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3302      	adds	r3, #2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e007      	b.n	8004442 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	3301      	adds	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cf      	bne.n	80043fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2140      	movs	r1, #64	; 0x40
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fac9 	bl	80049fc <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e006      	b.n	8004482 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b0ba      	sub	sp, #232	; 0xe8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_UART_IRQHandler+0x66>
 80044de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fbd3 	bl	8004c96 <UART_Receive_IT>
      return;
 80044f0:	e256      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80de 	beq.w	80046b8 <HAL_UART_IRQHandler+0x22c>
 80044fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80d1 	beq.w	80046b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <HAL_UART_IRQHandler+0xae>
 8004522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <HAL_UART_IRQHandler+0xd2>
 8004546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f043 0202 	orr.w	r2, r3, #2
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00b      	beq.n	8004582 <HAL_UART_IRQHandler+0xf6>
 800456a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f043 0204 	orr.w	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d011      	beq.n	80045b2 <HAL_UART_IRQHandler+0x126>
 800458e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d105      	bne.n	80045a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f043 0208 	orr.w	r2, r3, #8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 81ed 	beq.w	8004996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_UART_IRQHandler+0x14e>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fb5e 	bl	8004c96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <HAL_UART_IRQHandler+0x17a>
 80045fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d04f      	beq.n	80046a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa66 	bl	8004ad8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d141      	bne.n	800469e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3314      	adds	r3, #20
 8004620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800464a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800465e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1d9      	bne.n	800461a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d013      	beq.n	8004696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4a7d      	ldr	r2, [pc, #500]	; (8004868 <HAL_UART_IRQHandler+0x3dc>)
 8004674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe f801 	bl	8002682 <HAL_DMA_Abort_IT>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004690:	4610      	mov	r0, r2
 8004692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	e00e      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f99a 	bl	80049d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00a      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f996 	bl	80049d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e006      	b.n	80046b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f992 	bl	80049d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80046b2:	e170      	b.n	8004996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b4:	bf00      	nop
    return;
 80046b6:	e16e      	b.n	8004996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 814a 	bne.w	8004956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8143 	beq.w	8004956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 813c 	beq.w	8004956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	f040 80b4 	bne.w	800486c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8140 	beq.w	800499a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800471e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004722:	429a      	cmp	r2, r3
 8004724:	f080 8139 	bcs.w	800499a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	f000 8088 	beq.w	800484e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800475c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800476a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800476e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1d9      	bne.n	800473e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800479a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3314      	adds	r3, #20
 80047aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e1      	bne.n	800478a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e3      	bne.n	80047c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004830:	65ba      	str	r2, [r7, #88]	; 0x58
 8004832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e3      	bne.n	800480c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd feaa 	bl	80025a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004856:	b29b      	uxth	r3, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8c0 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004864:	e099      	b.n	800499a <HAL_UART_IRQHandler+0x50e>
 8004866:	bf00      	nop
 8004868:	08004b9f 	.word	0x08004b9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004874:	b29b      	uxth	r3, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 808b 	beq.w	800499e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8086 	beq.w	800499e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80048b6:	647a      	str	r2, [r7, #68]	; 0x44
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	623b      	str	r3, [r7, #32]
   return(result);
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e3      	bne.n	80048ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	330c      	adds	r3, #12
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e3      	bne.n	8004910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f848 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004954:	e023      	b.n	800499e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <HAL_UART_IRQHandler+0x4ea>
 8004962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f929 	bl	8004bc6 <UART_Transmit_IT>
    return;
 8004974:	e014      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <HAL_UART_IRQHandler+0x514>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d008      	beq.n	80049a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f969 	bl	8004c66 <UART_EndTransmit_IT>
    return;
 8004994:	e004      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
      return;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <HAL_UART_IRQHandler+0x514>
      return;
 800499e:	bf00      	nop
  }
}
 80049a0:	37e8      	adds	r7, #232	; 0xe8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop

080049a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b090      	sub	sp, #64	; 0x40
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0c:	e050      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d04c      	beq.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1c:	f7fd fc80 	bl	8002320 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d241      	bcs.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4c:	637a      	str	r2, [r7, #52]	; 0x34
 8004a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a80:	623a      	str	r2, [r7, #32]
 8004a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69f9      	ldr	r1, [r7, #28]
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e00f      	b.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d09f      	beq.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3740      	adds	r7, #64	; 0x40
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b095      	sub	sp, #84	; 0x54
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b00:	643a      	str	r2, [r7, #64]	; 0x40
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3314      	adds	r3, #20
 8004b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d119      	bne.n	8004b84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b70:	61ba      	str	r2, [r7, #24]
 8004b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6979      	ldr	r1, [r7, #20]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b92:	bf00      	nop
 8004b94:	3754      	adds	r7, #84	; 0x54
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff09 	bl	80049d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b21      	cmp	r3, #33	; 0x21
 8004bd8:	d13e      	bne.n	8004c58 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d114      	bne.n	8004c0e <UART_Transmit_IT+0x48>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d110      	bne.n	8004c0e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c00:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	1c9a      	adds	r2, r3, #2
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	621a      	str	r2, [r3, #32]
 8004c0c:	e008      	b.n	8004c20 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6211      	str	r1, [r2, #32]
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10f      	bne.n	8004c54 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fe8e 	bl	80049a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b08c      	sub	sp, #48	; 0x30
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b22      	cmp	r3, #34	; 0x22
 8004ca8:	f040 80ab 	bne.w	8004e02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d117      	bne.n	8004ce6 <UART_Receive_IT+0x50>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d113      	bne.n	8004ce6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	1c9a      	adds	r2, r3, #2
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ce4:	e026      	b.n	8004d34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d007      	beq.n	8004d0a <UART_Receive_IT+0x74>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <UART_Receive_IT+0x82>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e008      	b.n	8004d2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4619      	mov	r1, r3
 8004d42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d15a      	bne.n	8004dfe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0220 	bic.w	r2, r2, #32
 8004d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d135      	bne.n	8004df4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	f023 0310 	bic.w	r3, r3, #16
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dae:	623a      	str	r2, [r7, #32]
 8004db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	69f9      	ldr	r1, [r7, #28]
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e5      	bne.n	8004d8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d10a      	bne.n	8004de6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fdf9 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
 8004df2:	e002      	b.n	8004dfa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff fde1 	bl	80049bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e002      	b.n	8004e04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3730      	adds	r7, #48	; 0x30
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	b09f      	sub	sp, #124	; 0x7c
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e22:	68d9      	ldr	r1, [r3, #12]
 8004e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	ea40 0301 	orr.w	r3, r0, r1
 8004e2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e50:	f021 010c 	bic.w	r1, r1, #12
 8004e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6a:	6999      	ldr	r1, [r3, #24]
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	ea40 0301 	orr.w	r3, r0, r1
 8004e74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4bc5      	ldr	r3, [pc, #788]	; (8005190 <UART_SetConfig+0x384>)
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d004      	beq.n	8004e8a <UART_SetConfig+0x7e>
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4bc3      	ldr	r3, [pc, #780]	; (8005194 <UART_SetConfig+0x388>)
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d103      	bne.n	8004e92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e8a:	f7fe fa07 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8004e8e:	6778      	str	r0, [r7, #116]	; 0x74
 8004e90:	e002      	b.n	8004e98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e92:	f7fe f9ef 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8004e96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	f040 80b6 	bne.w	8005010 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ea4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	f04f 0500 	mov.w	r5, #0
 8004eac:	4622      	mov	r2, r4
 8004eae:	462b      	mov	r3, r5
 8004eb0:	1891      	adds	r1, r2, r2
 8004eb2:	6439      	str	r1, [r7, #64]	; 0x40
 8004eb4:	415b      	adcs	r3, r3
 8004eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ebc:	1912      	adds	r2, r2, r4
 8004ebe:	eb45 0303 	adc.w	r3, r5, r3
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f04f 0100 	mov.w	r1, #0
 8004eca:	00d9      	lsls	r1, r3, #3
 8004ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed0:	00d0      	lsls	r0, r2, #3
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	1911      	adds	r1, r2, r4
 8004ed8:	6639      	str	r1, [r7, #96]	; 0x60
 8004eda:	416b      	adcs	r3, r5
 8004edc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	63b9      	str	r1, [r7, #56]	; 0x38
 8004eec:	415b      	adcs	r3, r3
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ef8:	f7fb f9c2 	bl	8000280 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4ba5      	ldr	r3, [pc, #660]	; (8005198 <UART_SetConfig+0x38c>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	011e      	lsls	r6, r3, #4
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	461c      	mov	r4, r3
 8004f0e:	f04f 0500 	mov.w	r5, #0
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	1891      	adds	r1, r2, r2
 8004f18:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f22:	1912      	adds	r2, r2, r4
 8004f24:	eb45 0303 	adc.w	r3, r5, r3
 8004f28:	f04f 0000 	mov.w	r0, #0
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	00d9      	lsls	r1, r3, #3
 8004f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f36:	00d0      	lsls	r0, r2, #3
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	1911      	adds	r1, r2, r4
 8004f3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f40:	416b      	adcs	r3, r5
 8004f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f52:	415b      	adcs	r3, r3
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f5e:	f7fb f98f 	bl	8000280 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b8c      	ldr	r3, [pc, #560]	; (8005198 <UART_SetConfig+0x38c>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	; 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a87      	ldr	r2, [pc, #540]	; (8005198 <UART_SetConfig+0x38c>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f88:	441e      	add	r6, r3
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	1894      	adds	r4, r2, r2
 8004f98:	623c      	str	r4, [r7, #32]
 8004f9a:	415b      	adcs	r3, r3
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fa2:	1812      	adds	r2, r2, r0
 8004fa4:	eb41 0303 	adc.w	r3, r1, r3
 8004fa8:	f04f 0400 	mov.w	r4, #0
 8004fac:	f04f 0500 	mov.w	r5, #0
 8004fb0:	00dd      	lsls	r5, r3, #3
 8004fb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fb6:	00d4      	lsls	r4, r2, #3
 8004fb8:	4622      	mov	r2, r4
 8004fba:	462b      	mov	r3, r5
 8004fbc:	1814      	adds	r4, r2, r0
 8004fbe:	653c      	str	r4, [r7, #80]	; 0x50
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	657b      	str	r3, [r7, #84]	; 0x54
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	1891      	adds	r1, r2, r2
 8004fd0:	61b9      	str	r1, [r7, #24]
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004fde:	f7fb f94f 	bl	8000280 <__aeabi_uldivmod>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4b6c      	ldr	r3, [pc, #432]	; (8005198 <UART_SetConfig+0x38c>)
 8004fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	2164      	movs	r1, #100	; 0x64
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	3332      	adds	r3, #50	; 0x32
 8004ffa:	4a67      	ldr	r2, [pc, #412]	; (8005198 <UART_SetConfig+0x38c>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	f003 0207 	and.w	r2, r3, #7
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4432      	add	r2, r6
 800500c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800500e:	e0b9      	b.n	8005184 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005012:	461c      	mov	r4, r3
 8005014:	f04f 0500 	mov.w	r5, #0
 8005018:	4622      	mov	r2, r4
 800501a:	462b      	mov	r3, r5
 800501c:	1891      	adds	r1, r2, r2
 800501e:	6139      	str	r1, [r7, #16]
 8005020:	415b      	adcs	r3, r3
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005028:	1912      	adds	r2, r2, r4
 800502a:	eb45 0303 	adc.w	r3, r5, r3
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	00d9      	lsls	r1, r3, #3
 8005038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800503c:	00d0      	lsls	r0, r2, #3
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	eb12 0804 	adds.w	r8, r2, r4
 8005046:	eb43 0905 	adc.w	r9, r3, r5
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	008b      	lsls	r3, r1, #2
 800505e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005062:	0082      	lsls	r2, r0, #2
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb f90a 	bl	8000280 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b49      	ldr	r3, [pc, #292]	; (8005198 <UART_SetConfig+0x38c>)
 8005072:	fba3 2302 	umull	r2, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	011e      	lsls	r6, r3, #4
 800507a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507c:	4618      	mov	r0, r3
 800507e:	f04f 0100 	mov.w	r1, #0
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	1894      	adds	r4, r2, r2
 8005088:	60bc      	str	r4, [r7, #8]
 800508a:	415b      	adcs	r3, r3
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005092:	1812      	adds	r2, r2, r0
 8005094:	eb41 0303 	adc.w	r3, r1, r3
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	f04f 0500 	mov.w	r5, #0
 80050a0:	00dd      	lsls	r5, r3, #3
 80050a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050a6:	00d4      	lsls	r4, r2, #3
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	1814      	adds	r4, r2, r0
 80050ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80050b0:	414b      	adcs	r3, r1
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050cc:	0082      	lsls	r2, r0, #2
 80050ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050d2:	f7fb f8d5 	bl	8000280 <__aeabi_uldivmod>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <UART_SetConfig+0x38c>)
 80050dc:	fba3 1302 	umull	r1, r3, r3, r2
 80050e0:	095b      	lsrs	r3, r3, #5
 80050e2:	2164      	movs	r1, #100	; 0x64
 80050e4:	fb01 f303 	mul.w	r3, r1, r3
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	3332      	adds	r3, #50	; 0x32
 80050ee:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <UART_SetConfig+0x38c>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050fa:	441e      	add	r6, r3
 80050fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050fe:	4618      	mov	r0, r3
 8005100:	f04f 0100 	mov.w	r1, #0
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	1894      	adds	r4, r2, r2
 800510a:	603c      	str	r4, [r7, #0]
 800510c:	415b      	adcs	r3, r3
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005114:	1812      	adds	r2, r2, r0
 8005116:	eb41 0303 	adc.w	r3, r1, r3
 800511a:	f04f 0400 	mov.w	r4, #0
 800511e:	f04f 0500 	mov.w	r5, #0
 8005122:	00dd      	lsls	r5, r3, #3
 8005124:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005128:	00d4      	lsls	r4, r2, #3
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	eb12 0a00 	adds.w	sl, r2, r0
 8005132:	eb43 0b01 	adc.w	fp, r3, r1
 8005136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4618      	mov	r0, r3
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	008b      	lsls	r3, r1, #2
 800514a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800514e:	0082      	lsls	r2, r0, #2
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f894 	bl	8000280 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <UART_SetConfig+0x38c>)
 800515e:	fba3 1302 	umull	r1, r3, r3, r2
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	2164      	movs	r1, #100	; 0x64
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	3332      	adds	r3, #50	; 0x32
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <UART_SetConfig+0x38c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4432      	add	r2, r6
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	377c      	adds	r7, #124	; 0x7c
 8005188:	46bd      	mov	sp, r7
 800518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518e:	bf00      	nop
 8005190:	40011000 	.word	0x40011000
 8005194:	40011400 	.word	0x40011400
 8005198:	51eb851f 	.word	0x51eb851f

0800519c <__errno>:
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <__errno+0x8>)
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000058 	.word	0x20000058

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 ff84 	bl	80060c8 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08006248 	.word	0x08006248
 80051e4:	08006248 	.word	0x08006248
 80051e8:	08006248 	.word	0x08006248
 80051ec:	0800624c 	.word	0x0800624c

080051f0 <memcpy>:
 80051f0:	440a      	add	r2, r1
 80051f2:	4291      	cmp	r1, r2
 80051f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051f8:	d100      	bne.n	80051fc <memcpy+0xc>
 80051fa:	4770      	bx	lr
 80051fc:	b510      	push	{r4, lr}
 80051fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005206:	4291      	cmp	r1, r2
 8005208:	d1f9      	bne.n	80051fe <memcpy+0xe>
 800520a:	bd10      	pop	{r4, pc}

0800520c <memset>:
 800520c:	4402      	add	r2, r0
 800520e:	4603      	mov	r3, r0
 8005210:	4293      	cmp	r3, r2
 8005212:	d100      	bne.n	8005216 <memset+0xa>
 8005214:	4770      	bx	lr
 8005216:	f803 1b01 	strb.w	r1, [r3], #1
 800521a:	e7f9      	b.n	8005210 <memset+0x4>

0800521c <iprintf>:
 800521c:	b40f      	push	{r0, r1, r2, r3}
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <iprintf+0x2c>)
 8005220:	b513      	push	{r0, r1, r4, lr}
 8005222:	681c      	ldr	r4, [r3, #0]
 8005224:	b124      	cbz	r4, 8005230 <iprintf+0x14>
 8005226:	69a3      	ldr	r3, [r4, #24]
 8005228:	b913      	cbnz	r3, 8005230 <iprintf+0x14>
 800522a:	4620      	mov	r0, r4
 800522c:	f000 f866 	bl	80052fc <__sinit>
 8005230:	ab05      	add	r3, sp, #20
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	68a1      	ldr	r1, [r4, #8]
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f983 	bl	8005544 <_vfiprintf_r>
 800523e:	b002      	add	sp, #8
 8005240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005244:	b004      	add	sp, #16
 8005246:	4770      	bx	lr
 8005248:	20000058 	.word	0x20000058

0800524c <std>:
 800524c:	2300      	movs	r3, #0
 800524e:	b510      	push	{r4, lr}
 8005250:	4604      	mov	r4, r0
 8005252:	e9c0 3300 	strd	r3, r3, [r0]
 8005256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525a:	6083      	str	r3, [r0, #8]
 800525c:	8181      	strh	r1, [r0, #12]
 800525e:	6643      	str	r3, [r0, #100]	; 0x64
 8005260:	81c2      	strh	r2, [r0, #14]
 8005262:	6183      	str	r3, [r0, #24]
 8005264:	4619      	mov	r1, r3
 8005266:	2208      	movs	r2, #8
 8005268:	305c      	adds	r0, #92	; 0x5c
 800526a:	f7ff ffcf 	bl	800520c <memset>
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <std+0x38>)
 8005270:	6263      	str	r3, [r4, #36]	; 0x24
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <std+0x3c>)
 8005274:	62a3      	str	r3, [r4, #40]	; 0x28
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <std+0x40>)
 8005278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <std+0x44>)
 800527c:	6224      	str	r4, [r4, #32]
 800527e:	6323      	str	r3, [r4, #48]	; 0x30
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	08005aed 	.word	0x08005aed
 8005288:	08005b0f 	.word	0x08005b0f
 800528c:	08005b47 	.word	0x08005b47
 8005290:	08005b6b 	.word	0x08005b6b

08005294 <_cleanup_r>:
 8005294:	4901      	ldr	r1, [pc, #4]	; (800529c <_cleanup_r+0x8>)
 8005296:	f000 b8af 	b.w	80053f8 <_fwalk_reent>
 800529a:	bf00      	nop
 800529c:	08005e45 	.word	0x08005e45

080052a0 <__sfmoreglue>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	1e4a      	subs	r2, r1, #1
 80052a4:	2568      	movs	r5, #104	; 0x68
 80052a6:	4355      	muls	r5, r2
 80052a8:	460e      	mov	r6, r1
 80052aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052ae:	f000 f8c5 	bl	800543c <_malloc_r>
 80052b2:	4604      	mov	r4, r0
 80052b4:	b140      	cbz	r0, 80052c8 <__sfmoreglue+0x28>
 80052b6:	2100      	movs	r1, #0
 80052b8:	e9c0 1600 	strd	r1, r6, [r0]
 80052bc:	300c      	adds	r0, #12
 80052be:	60a0      	str	r0, [r4, #8]
 80052c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052c4:	f7ff ffa2 	bl	800520c <memset>
 80052c8:	4620      	mov	r0, r4
 80052ca:	bd70      	pop	{r4, r5, r6, pc}

080052cc <__sfp_lock_acquire>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__sfp_lock_acquire+0x8>)
 80052ce:	f000 b8b3 	b.w	8005438 <__retarget_lock_acquire_recursive>
 80052d2:	bf00      	nop
 80052d4:	20000294 	.word	0x20000294

080052d8 <__sfp_lock_release>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__sfp_lock_release+0x8>)
 80052da:	f000 b8ae 	b.w	800543a <__retarget_lock_release_recursive>
 80052de:	bf00      	nop
 80052e0:	20000294 	.word	0x20000294

080052e4 <__sinit_lock_acquire>:
 80052e4:	4801      	ldr	r0, [pc, #4]	; (80052ec <__sinit_lock_acquire+0x8>)
 80052e6:	f000 b8a7 	b.w	8005438 <__retarget_lock_acquire_recursive>
 80052ea:	bf00      	nop
 80052ec:	2000028f 	.word	0x2000028f

080052f0 <__sinit_lock_release>:
 80052f0:	4801      	ldr	r0, [pc, #4]	; (80052f8 <__sinit_lock_release+0x8>)
 80052f2:	f000 b8a2 	b.w	800543a <__retarget_lock_release_recursive>
 80052f6:	bf00      	nop
 80052f8:	2000028f 	.word	0x2000028f

080052fc <__sinit>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	4604      	mov	r4, r0
 8005300:	f7ff fff0 	bl	80052e4 <__sinit_lock_acquire>
 8005304:	69a3      	ldr	r3, [r4, #24]
 8005306:	b11b      	cbz	r3, 8005310 <__sinit+0x14>
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	f7ff bff0 	b.w	80052f0 <__sinit_lock_release>
 8005310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005314:	6523      	str	r3, [r4, #80]	; 0x50
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <__sinit+0x68>)
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <__sinit+0x6c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	62a2      	str	r2, [r4, #40]	; 0x28
 800531e:	42a3      	cmp	r3, r4
 8005320:	bf04      	itt	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	61a3      	streq	r3, [r4, #24]
 8005326:	4620      	mov	r0, r4
 8005328:	f000 f820 	bl	800536c <__sfp>
 800532c:	6060      	str	r0, [r4, #4]
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f81c 	bl	800536c <__sfp>
 8005334:	60a0      	str	r0, [r4, #8]
 8005336:	4620      	mov	r0, r4
 8005338:	f000 f818 	bl	800536c <__sfp>
 800533c:	2200      	movs	r2, #0
 800533e:	60e0      	str	r0, [r4, #12]
 8005340:	2104      	movs	r1, #4
 8005342:	6860      	ldr	r0, [r4, #4]
 8005344:	f7ff ff82 	bl	800524c <std>
 8005348:	68a0      	ldr	r0, [r4, #8]
 800534a:	2201      	movs	r2, #1
 800534c:	2109      	movs	r1, #9
 800534e:	f7ff ff7d 	bl	800524c <std>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	2202      	movs	r2, #2
 8005356:	2112      	movs	r1, #18
 8005358:	f7ff ff78 	bl	800524c <std>
 800535c:	2301      	movs	r3, #1
 800535e:	61a3      	str	r3, [r4, #24]
 8005360:	e7d2      	b.n	8005308 <__sinit+0xc>
 8005362:	bf00      	nop
 8005364:	080061a8 	.word	0x080061a8
 8005368:	08005295 	.word	0x08005295

0800536c <__sfp>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	4607      	mov	r7, r0
 8005370:	f7ff ffac 	bl	80052cc <__sfp_lock_acquire>
 8005374:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <__sfp+0x84>)
 8005376:	681e      	ldr	r6, [r3, #0]
 8005378:	69b3      	ldr	r3, [r6, #24]
 800537a:	b913      	cbnz	r3, 8005382 <__sfp+0x16>
 800537c:	4630      	mov	r0, r6
 800537e:	f7ff ffbd 	bl	80052fc <__sinit>
 8005382:	3648      	adds	r6, #72	; 0x48
 8005384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005388:	3b01      	subs	r3, #1
 800538a:	d503      	bpl.n	8005394 <__sfp+0x28>
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	b30b      	cbz	r3, 80053d4 <__sfp+0x68>
 8005390:	6836      	ldr	r6, [r6, #0]
 8005392:	e7f7      	b.n	8005384 <__sfp+0x18>
 8005394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005398:	b9d5      	cbnz	r5, 80053d0 <__sfp+0x64>
 800539a:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <__sfp+0x88>)
 800539c:	60e3      	str	r3, [r4, #12]
 800539e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053a2:	6665      	str	r5, [r4, #100]	; 0x64
 80053a4:	f000 f847 	bl	8005436 <__retarget_lock_init_recursive>
 80053a8:	f7ff ff96 	bl	80052d8 <__sfp_lock_release>
 80053ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053b4:	6025      	str	r5, [r4, #0]
 80053b6:	61a5      	str	r5, [r4, #24]
 80053b8:	2208      	movs	r2, #8
 80053ba:	4629      	mov	r1, r5
 80053bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053c0:	f7ff ff24 	bl	800520c <memset>
 80053c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053cc:	4620      	mov	r0, r4
 80053ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d0:	3468      	adds	r4, #104	; 0x68
 80053d2:	e7d9      	b.n	8005388 <__sfp+0x1c>
 80053d4:	2104      	movs	r1, #4
 80053d6:	4638      	mov	r0, r7
 80053d8:	f7ff ff62 	bl	80052a0 <__sfmoreglue>
 80053dc:	4604      	mov	r4, r0
 80053de:	6030      	str	r0, [r6, #0]
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d1d5      	bne.n	8005390 <__sfp+0x24>
 80053e4:	f7ff ff78 	bl	80052d8 <__sfp_lock_release>
 80053e8:	230c      	movs	r3, #12
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	e7ee      	b.n	80053cc <__sfp+0x60>
 80053ee:	bf00      	nop
 80053f0:	080061a8 	.word	0x080061a8
 80053f4:	ffff0001 	.word	0xffff0001

080053f8 <_fwalk_reent>:
 80053f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053fc:	4606      	mov	r6, r0
 80053fe:	4688      	mov	r8, r1
 8005400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005404:	2700      	movs	r7, #0
 8005406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800540a:	f1b9 0901 	subs.w	r9, r9, #1
 800540e:	d505      	bpl.n	800541c <_fwalk_reent+0x24>
 8005410:	6824      	ldr	r4, [r4, #0]
 8005412:	2c00      	cmp	r4, #0
 8005414:	d1f7      	bne.n	8005406 <_fwalk_reent+0xe>
 8005416:	4638      	mov	r0, r7
 8005418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541c:	89ab      	ldrh	r3, [r5, #12]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d907      	bls.n	8005432 <_fwalk_reent+0x3a>
 8005422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005426:	3301      	adds	r3, #1
 8005428:	d003      	beq.n	8005432 <_fwalk_reent+0x3a>
 800542a:	4629      	mov	r1, r5
 800542c:	4630      	mov	r0, r6
 800542e:	47c0      	blx	r8
 8005430:	4307      	orrs	r7, r0
 8005432:	3568      	adds	r5, #104	; 0x68
 8005434:	e7e9      	b.n	800540a <_fwalk_reent+0x12>

08005436 <__retarget_lock_init_recursive>:
 8005436:	4770      	bx	lr

08005438 <__retarget_lock_acquire_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_release_recursive>:
 800543a:	4770      	bx	lr

0800543c <_malloc_r>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	1ccd      	adds	r5, r1, #3
 8005440:	f025 0503 	bic.w	r5, r5, #3
 8005444:	3508      	adds	r5, #8
 8005446:	2d0c      	cmp	r5, #12
 8005448:	bf38      	it	cc
 800544a:	250c      	movcc	r5, #12
 800544c:	2d00      	cmp	r5, #0
 800544e:	4606      	mov	r6, r0
 8005450:	db01      	blt.n	8005456 <_malloc_r+0x1a>
 8005452:	42a9      	cmp	r1, r5
 8005454:	d903      	bls.n	800545e <_malloc_r+0x22>
 8005456:	230c      	movs	r3, #12
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	2000      	movs	r0, #0
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545e:	f000 fda3 	bl	8005fa8 <__malloc_lock>
 8005462:	4921      	ldr	r1, [pc, #132]	; (80054e8 <_malloc_r+0xac>)
 8005464:	680a      	ldr	r2, [r1, #0]
 8005466:	4614      	mov	r4, r2
 8005468:	b99c      	cbnz	r4, 8005492 <_malloc_r+0x56>
 800546a:	4f20      	ldr	r7, [pc, #128]	; (80054ec <_malloc_r+0xb0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b923      	cbnz	r3, 800547a <_malloc_r+0x3e>
 8005470:	4621      	mov	r1, r4
 8005472:	4630      	mov	r0, r6
 8005474:	f000 fb2a 	bl	8005acc <_sbrk_r>
 8005478:	6038      	str	r0, [r7, #0]
 800547a:	4629      	mov	r1, r5
 800547c:	4630      	mov	r0, r6
 800547e:	f000 fb25 	bl	8005acc <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d123      	bne.n	80054ce <_malloc_r+0x92>
 8005486:	230c      	movs	r3, #12
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	4630      	mov	r0, r6
 800548c:	f000 fd92 	bl	8005fb4 <__malloc_unlock>
 8005490:	e7e3      	b.n	800545a <_malloc_r+0x1e>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	1b5b      	subs	r3, r3, r5
 8005496:	d417      	bmi.n	80054c8 <_malloc_r+0x8c>
 8005498:	2b0b      	cmp	r3, #11
 800549a:	d903      	bls.n	80054a4 <_malloc_r+0x68>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	441c      	add	r4, r3
 80054a0:	6025      	str	r5, [r4, #0]
 80054a2:	e004      	b.n	80054ae <_malloc_r+0x72>
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	42a2      	cmp	r2, r4
 80054a8:	bf0c      	ite	eq
 80054aa:	600b      	streq	r3, [r1, #0]
 80054ac:	6053      	strne	r3, [r2, #4]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 fd80 	bl	8005fb4 <__malloc_unlock>
 80054b4:	f104 000b 	add.w	r0, r4, #11
 80054b8:	1d23      	adds	r3, r4, #4
 80054ba:	f020 0007 	bic.w	r0, r0, #7
 80054be:	1ac2      	subs	r2, r0, r3
 80054c0:	d0cc      	beq.n	800545c <_malloc_r+0x20>
 80054c2:	1a1b      	subs	r3, r3, r0
 80054c4:	50a3      	str	r3, [r4, r2]
 80054c6:	e7c9      	b.n	800545c <_malloc_r+0x20>
 80054c8:	4622      	mov	r2, r4
 80054ca:	6864      	ldr	r4, [r4, #4]
 80054cc:	e7cc      	b.n	8005468 <_malloc_r+0x2c>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d0e3      	beq.n	80054a0 <_malloc_r+0x64>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 faf6 	bl	8005acc <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1dd      	bne.n	80054a0 <_malloc_r+0x64>
 80054e4:	e7cf      	b.n	8005486 <_malloc_r+0x4a>
 80054e6:	bf00      	nop
 80054e8:	20000104 	.word	0x20000104
 80054ec:	20000108 	.word	0x20000108

080054f0 <__sfputc_r>:
 80054f0:	6893      	ldr	r3, [r2, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	b410      	push	{r4}
 80054f8:	6093      	str	r3, [r2, #8]
 80054fa:	da08      	bge.n	800550e <__sfputc_r+0x1e>
 80054fc:	6994      	ldr	r4, [r2, #24]
 80054fe:	42a3      	cmp	r3, r4
 8005500:	db01      	blt.n	8005506 <__sfputc_r+0x16>
 8005502:	290a      	cmp	r1, #10
 8005504:	d103      	bne.n	800550e <__sfputc_r+0x1e>
 8005506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550a:	f000 bb33 	b.w	8005b74 <__swbuf_r>
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	1c58      	adds	r0, r3, #1
 8005512:	6010      	str	r0, [r2, #0]
 8005514:	7019      	strb	r1, [r3, #0]
 8005516:	4608      	mov	r0, r1
 8005518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551c:	4770      	bx	lr

0800551e <__sfputs_r>:
 800551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005520:	4606      	mov	r6, r0
 8005522:	460f      	mov	r7, r1
 8005524:	4614      	mov	r4, r2
 8005526:	18d5      	adds	r5, r2, r3
 8005528:	42ac      	cmp	r4, r5
 800552a:	d101      	bne.n	8005530 <__sfputs_r+0x12>
 800552c:	2000      	movs	r0, #0
 800552e:	e007      	b.n	8005540 <__sfputs_r+0x22>
 8005530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005534:	463a      	mov	r2, r7
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff ffda 	bl	80054f0 <__sfputc_r>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d1f3      	bne.n	8005528 <__sfputs_r+0xa>
 8005540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005544 <_vfiprintf_r>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	460d      	mov	r5, r1
 800554a:	b09d      	sub	sp, #116	; 0x74
 800554c:	4614      	mov	r4, r2
 800554e:	4698      	mov	r8, r3
 8005550:	4606      	mov	r6, r0
 8005552:	b118      	cbz	r0, 800555c <_vfiprintf_r+0x18>
 8005554:	6983      	ldr	r3, [r0, #24]
 8005556:	b90b      	cbnz	r3, 800555c <_vfiprintf_r+0x18>
 8005558:	f7ff fed0 	bl	80052fc <__sinit>
 800555c:	4b89      	ldr	r3, [pc, #548]	; (8005784 <_vfiprintf_r+0x240>)
 800555e:	429d      	cmp	r5, r3
 8005560:	d11b      	bne.n	800559a <_vfiprintf_r+0x56>
 8005562:	6875      	ldr	r5, [r6, #4]
 8005564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005566:	07d9      	lsls	r1, r3, #31
 8005568:	d405      	bmi.n	8005576 <_vfiprintf_r+0x32>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	059a      	lsls	r2, r3, #22
 800556e:	d402      	bmi.n	8005576 <_vfiprintf_r+0x32>
 8005570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005572:	f7ff ff61 	bl	8005438 <__retarget_lock_acquire_recursive>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	071b      	lsls	r3, r3, #28
 800557a:	d501      	bpl.n	8005580 <_vfiprintf_r+0x3c>
 800557c:	692b      	ldr	r3, [r5, #16]
 800557e:	b9eb      	cbnz	r3, 80055bc <_vfiprintf_r+0x78>
 8005580:	4629      	mov	r1, r5
 8005582:	4630      	mov	r0, r6
 8005584:	f000 fb5a 	bl	8005c3c <__swsetup_r>
 8005588:	b1c0      	cbz	r0, 80055bc <_vfiprintf_r+0x78>
 800558a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800558c:	07dc      	lsls	r4, r3, #31
 800558e:	d50e      	bpl.n	80055ae <_vfiprintf_r+0x6a>
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	b01d      	add	sp, #116	; 0x74
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <_vfiprintf_r+0x244>)
 800559c:	429d      	cmp	r5, r3
 800559e:	d101      	bne.n	80055a4 <_vfiprintf_r+0x60>
 80055a0:	68b5      	ldr	r5, [r6, #8]
 80055a2:	e7df      	b.n	8005564 <_vfiprintf_r+0x20>
 80055a4:	4b79      	ldr	r3, [pc, #484]	; (800578c <_vfiprintf_r+0x248>)
 80055a6:	429d      	cmp	r5, r3
 80055a8:	bf08      	it	eq
 80055aa:	68f5      	ldreq	r5, [r6, #12]
 80055ac:	e7da      	b.n	8005564 <_vfiprintf_r+0x20>
 80055ae:	89ab      	ldrh	r3, [r5, #12]
 80055b0:	0598      	lsls	r0, r3, #22
 80055b2:	d4ed      	bmi.n	8005590 <_vfiprintf_r+0x4c>
 80055b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b6:	f7ff ff40 	bl	800543a <__retarget_lock_release_recursive>
 80055ba:	e7e9      	b.n	8005590 <_vfiprintf_r+0x4c>
 80055bc:	2300      	movs	r3, #0
 80055be:	9309      	str	r3, [sp, #36]	; 0x24
 80055c0:	2320      	movs	r3, #32
 80055c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ca:	2330      	movs	r3, #48	; 0x30
 80055cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005790 <_vfiprintf_r+0x24c>
 80055d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d4:	f04f 0901 	mov.w	r9, #1
 80055d8:	4623      	mov	r3, r4
 80055da:	469a      	mov	sl, r3
 80055dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055e0:	b10a      	cbz	r2, 80055e6 <_vfiprintf_r+0xa2>
 80055e2:	2a25      	cmp	r2, #37	; 0x25
 80055e4:	d1f9      	bne.n	80055da <_vfiprintf_r+0x96>
 80055e6:	ebba 0b04 	subs.w	fp, sl, r4
 80055ea:	d00b      	beq.n	8005604 <_vfiprintf_r+0xc0>
 80055ec:	465b      	mov	r3, fp
 80055ee:	4622      	mov	r2, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7ff ff93 	bl	800551e <__sfputs_r>
 80055f8:	3001      	adds	r0, #1
 80055fa:	f000 80aa 	beq.w	8005752 <_vfiprintf_r+0x20e>
 80055fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005600:	445a      	add	r2, fp
 8005602:	9209      	str	r2, [sp, #36]	; 0x24
 8005604:	f89a 3000 	ldrb.w	r3, [sl]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a2 	beq.w	8005752 <_vfiprintf_r+0x20e>
 800560e:	2300      	movs	r3, #0
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005618:	f10a 0a01 	add.w	sl, sl, #1
 800561c:	9304      	str	r3, [sp, #16]
 800561e:	9307      	str	r3, [sp, #28]
 8005620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005624:	931a      	str	r3, [sp, #104]	; 0x68
 8005626:	4654      	mov	r4, sl
 8005628:	2205      	movs	r2, #5
 800562a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562e:	4858      	ldr	r0, [pc, #352]	; (8005790 <_vfiprintf_r+0x24c>)
 8005630:	f7fa fdd6 	bl	80001e0 <memchr>
 8005634:	9a04      	ldr	r2, [sp, #16]
 8005636:	b9d8      	cbnz	r0, 8005670 <_vfiprintf_r+0x12c>
 8005638:	06d1      	lsls	r1, r2, #27
 800563a:	bf44      	itt	mi
 800563c:	2320      	movmi	r3, #32
 800563e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005642:	0713      	lsls	r3, r2, #28
 8005644:	bf44      	itt	mi
 8005646:	232b      	movmi	r3, #43	; 0x2b
 8005648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800564c:	f89a 3000 	ldrb.w	r3, [sl]
 8005650:	2b2a      	cmp	r3, #42	; 0x2a
 8005652:	d015      	beq.n	8005680 <_vfiprintf_r+0x13c>
 8005654:	9a07      	ldr	r2, [sp, #28]
 8005656:	4654      	mov	r4, sl
 8005658:	2000      	movs	r0, #0
 800565a:	f04f 0c0a 	mov.w	ip, #10
 800565e:	4621      	mov	r1, r4
 8005660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005664:	3b30      	subs	r3, #48	; 0x30
 8005666:	2b09      	cmp	r3, #9
 8005668:	d94e      	bls.n	8005708 <_vfiprintf_r+0x1c4>
 800566a:	b1b0      	cbz	r0, 800569a <_vfiprintf_r+0x156>
 800566c:	9207      	str	r2, [sp, #28]
 800566e:	e014      	b.n	800569a <_vfiprintf_r+0x156>
 8005670:	eba0 0308 	sub.w	r3, r0, r8
 8005674:	fa09 f303 	lsl.w	r3, r9, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	46a2      	mov	sl, r4
 800567e:	e7d2      	b.n	8005626 <_vfiprintf_r+0xe2>
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	1d19      	adds	r1, r3, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	9103      	str	r1, [sp, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	bfbb      	ittet	lt
 800568c:	425b      	neglt	r3, r3
 800568e:	f042 0202 	orrlt.w	r2, r2, #2
 8005692:	9307      	strge	r3, [sp, #28]
 8005694:	9307      	strlt	r3, [sp, #28]
 8005696:	bfb8      	it	lt
 8005698:	9204      	strlt	r2, [sp, #16]
 800569a:	7823      	ldrb	r3, [r4, #0]
 800569c:	2b2e      	cmp	r3, #46	; 0x2e
 800569e:	d10c      	bne.n	80056ba <_vfiprintf_r+0x176>
 80056a0:	7863      	ldrb	r3, [r4, #1]
 80056a2:	2b2a      	cmp	r3, #42	; 0x2a
 80056a4:	d135      	bne.n	8005712 <_vfiprintf_r+0x1ce>
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	9203      	str	r2, [sp, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bfb8      	it	lt
 80056b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b6:	3402      	adds	r4, #2
 80056b8:	9305      	str	r3, [sp, #20]
 80056ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057a0 <_vfiprintf_r+0x25c>
 80056be:	7821      	ldrb	r1, [r4, #0]
 80056c0:	2203      	movs	r2, #3
 80056c2:	4650      	mov	r0, sl
 80056c4:	f7fa fd8c 	bl	80001e0 <memchr>
 80056c8:	b140      	cbz	r0, 80056dc <_vfiprintf_r+0x198>
 80056ca:	2340      	movs	r3, #64	; 0x40
 80056cc:	eba0 000a 	sub.w	r0, r0, sl
 80056d0:	fa03 f000 	lsl.w	r0, r3, r0
 80056d4:	9b04      	ldr	r3, [sp, #16]
 80056d6:	4303      	orrs	r3, r0
 80056d8:	3401      	adds	r4, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e0:	482c      	ldr	r0, [pc, #176]	; (8005794 <_vfiprintf_r+0x250>)
 80056e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e6:	2206      	movs	r2, #6
 80056e8:	f7fa fd7a 	bl	80001e0 <memchr>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d03f      	beq.n	8005770 <_vfiprintf_r+0x22c>
 80056f0:	4b29      	ldr	r3, [pc, #164]	; (8005798 <_vfiprintf_r+0x254>)
 80056f2:	bb1b      	cbnz	r3, 800573c <_vfiprintf_r+0x1f8>
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	3307      	adds	r3, #7
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	3308      	adds	r3, #8
 80056fe:	9303      	str	r3, [sp, #12]
 8005700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005702:	443b      	add	r3, r7
 8005704:	9309      	str	r3, [sp, #36]	; 0x24
 8005706:	e767      	b.n	80055d8 <_vfiprintf_r+0x94>
 8005708:	fb0c 3202 	mla	r2, ip, r2, r3
 800570c:	460c      	mov	r4, r1
 800570e:	2001      	movs	r0, #1
 8005710:	e7a5      	b.n	800565e <_vfiprintf_r+0x11a>
 8005712:	2300      	movs	r3, #0
 8005714:	3401      	adds	r4, #1
 8005716:	9305      	str	r3, [sp, #20]
 8005718:	4619      	mov	r1, r3
 800571a:	f04f 0c0a 	mov.w	ip, #10
 800571e:	4620      	mov	r0, r4
 8005720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005724:	3a30      	subs	r2, #48	; 0x30
 8005726:	2a09      	cmp	r2, #9
 8005728:	d903      	bls.n	8005732 <_vfiprintf_r+0x1ee>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0c5      	beq.n	80056ba <_vfiprintf_r+0x176>
 800572e:	9105      	str	r1, [sp, #20]
 8005730:	e7c3      	b.n	80056ba <_vfiprintf_r+0x176>
 8005732:	fb0c 2101 	mla	r1, ip, r1, r2
 8005736:	4604      	mov	r4, r0
 8005738:	2301      	movs	r3, #1
 800573a:	e7f0      	b.n	800571e <_vfiprintf_r+0x1da>
 800573c:	ab03      	add	r3, sp, #12
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	462a      	mov	r2, r5
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <_vfiprintf_r+0x258>)
 8005744:	a904      	add	r1, sp, #16
 8005746:	4630      	mov	r0, r6
 8005748:	f3af 8000 	nop.w
 800574c:	4607      	mov	r7, r0
 800574e:	1c78      	adds	r0, r7, #1
 8005750:	d1d6      	bne.n	8005700 <_vfiprintf_r+0x1bc>
 8005752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005754:	07d9      	lsls	r1, r3, #31
 8005756:	d405      	bmi.n	8005764 <_vfiprintf_r+0x220>
 8005758:	89ab      	ldrh	r3, [r5, #12]
 800575a:	059a      	lsls	r2, r3, #22
 800575c:	d402      	bmi.n	8005764 <_vfiprintf_r+0x220>
 800575e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005760:	f7ff fe6b 	bl	800543a <__retarget_lock_release_recursive>
 8005764:	89ab      	ldrh	r3, [r5, #12]
 8005766:	065b      	lsls	r3, r3, #25
 8005768:	f53f af12 	bmi.w	8005590 <_vfiprintf_r+0x4c>
 800576c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800576e:	e711      	b.n	8005594 <_vfiprintf_r+0x50>
 8005770:	ab03      	add	r3, sp, #12
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	462a      	mov	r2, r5
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <_vfiprintf_r+0x258>)
 8005778:	a904      	add	r1, sp, #16
 800577a:	4630      	mov	r0, r6
 800577c:	f000 f880 	bl	8005880 <_printf_i>
 8005780:	e7e4      	b.n	800574c <_vfiprintf_r+0x208>
 8005782:	bf00      	nop
 8005784:	080061cc 	.word	0x080061cc
 8005788:	080061ec 	.word	0x080061ec
 800578c:	080061ac 	.word	0x080061ac
 8005790:	0800620c 	.word	0x0800620c
 8005794:	08006216 	.word	0x08006216
 8005798:	00000000 	.word	0x00000000
 800579c:	0800551f 	.word	0x0800551f
 80057a0:	08006212 	.word	0x08006212

080057a4 <_printf_common>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	4616      	mov	r6, r2
 80057aa:	4699      	mov	r9, r3
 80057ac:	688a      	ldr	r2, [r1, #8]
 80057ae:	690b      	ldr	r3, [r1, #16]
 80057b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057b4:	4293      	cmp	r3, r2
 80057b6:	bfb8      	it	lt
 80057b8:	4613      	movlt	r3, r2
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057c0:	4607      	mov	r7, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	b10a      	cbz	r2, 80057ca <_printf_common+0x26>
 80057c6:	3301      	adds	r3, #1
 80057c8:	6033      	str	r3, [r6, #0]
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	0699      	lsls	r1, r3, #26
 80057ce:	bf42      	ittt	mi
 80057d0:	6833      	ldrmi	r3, [r6, #0]
 80057d2:	3302      	addmi	r3, #2
 80057d4:	6033      	strmi	r3, [r6, #0]
 80057d6:	6825      	ldr	r5, [r4, #0]
 80057d8:	f015 0506 	ands.w	r5, r5, #6
 80057dc:	d106      	bne.n	80057ec <_printf_common+0x48>
 80057de:	f104 0a19 	add.w	sl, r4, #25
 80057e2:	68e3      	ldr	r3, [r4, #12]
 80057e4:	6832      	ldr	r2, [r6, #0]
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	42ab      	cmp	r3, r5
 80057ea:	dc26      	bgt.n	800583a <_printf_common+0x96>
 80057ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057f0:	1e13      	subs	r3, r2, #0
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	bf18      	it	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	0692      	lsls	r2, r2, #26
 80057fa:	d42b      	bmi.n	8005854 <_printf_common+0xb0>
 80057fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005800:	4649      	mov	r1, r9
 8005802:	4638      	mov	r0, r7
 8005804:	47c0      	blx	r8
 8005806:	3001      	adds	r0, #1
 8005808:	d01e      	beq.n	8005848 <_printf_common+0xa4>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	68e5      	ldr	r5, [r4, #12]
 800580e:	6832      	ldr	r2, [r6, #0]
 8005810:	f003 0306 	and.w	r3, r3, #6
 8005814:	2b04      	cmp	r3, #4
 8005816:	bf08      	it	eq
 8005818:	1aad      	subeq	r5, r5, r2
 800581a:	68a3      	ldr	r3, [r4, #8]
 800581c:	6922      	ldr	r2, [r4, #16]
 800581e:	bf0c      	ite	eq
 8005820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005824:	2500      	movne	r5, #0
 8005826:	4293      	cmp	r3, r2
 8005828:	bfc4      	itt	gt
 800582a:	1a9b      	subgt	r3, r3, r2
 800582c:	18ed      	addgt	r5, r5, r3
 800582e:	2600      	movs	r6, #0
 8005830:	341a      	adds	r4, #26
 8005832:	42b5      	cmp	r5, r6
 8005834:	d11a      	bne.n	800586c <_printf_common+0xc8>
 8005836:	2000      	movs	r0, #0
 8005838:	e008      	b.n	800584c <_printf_common+0xa8>
 800583a:	2301      	movs	r3, #1
 800583c:	4652      	mov	r2, sl
 800583e:	4649      	mov	r1, r9
 8005840:	4638      	mov	r0, r7
 8005842:	47c0      	blx	r8
 8005844:	3001      	adds	r0, #1
 8005846:	d103      	bne.n	8005850 <_printf_common+0xac>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	3501      	adds	r5, #1
 8005852:	e7c6      	b.n	80057e2 <_printf_common+0x3e>
 8005854:	18e1      	adds	r1, r4, r3
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	2030      	movs	r0, #48	; 0x30
 800585a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800585e:	4422      	add	r2, r4
 8005860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005868:	3302      	adds	r3, #2
 800586a:	e7c7      	b.n	80057fc <_printf_common+0x58>
 800586c:	2301      	movs	r3, #1
 800586e:	4622      	mov	r2, r4
 8005870:	4649      	mov	r1, r9
 8005872:	4638      	mov	r0, r7
 8005874:	47c0      	blx	r8
 8005876:	3001      	adds	r0, #1
 8005878:	d0e6      	beq.n	8005848 <_printf_common+0xa4>
 800587a:	3601      	adds	r6, #1
 800587c:	e7d9      	b.n	8005832 <_printf_common+0x8e>
	...

08005880 <_printf_i>:
 8005880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	4691      	mov	r9, r2
 8005888:	7e27      	ldrb	r7, [r4, #24]
 800588a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800588c:	2f78      	cmp	r7, #120	; 0x78
 800588e:	4680      	mov	r8, r0
 8005890:	469a      	mov	sl, r3
 8005892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005896:	d807      	bhi.n	80058a8 <_printf_i+0x28>
 8005898:	2f62      	cmp	r7, #98	; 0x62
 800589a:	d80a      	bhi.n	80058b2 <_printf_i+0x32>
 800589c:	2f00      	cmp	r7, #0
 800589e:	f000 80d8 	beq.w	8005a52 <_printf_i+0x1d2>
 80058a2:	2f58      	cmp	r7, #88	; 0x58
 80058a4:	f000 80a3 	beq.w	80059ee <_printf_i+0x16e>
 80058a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058b0:	e03a      	b.n	8005928 <_printf_i+0xa8>
 80058b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058b6:	2b15      	cmp	r3, #21
 80058b8:	d8f6      	bhi.n	80058a8 <_printf_i+0x28>
 80058ba:	a001      	add	r0, pc, #4	; (adr r0, 80058c0 <_printf_i+0x40>)
 80058bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058c0:	08005919 	.word	0x08005919
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	080058a9 	.word	0x080058a9
 80058cc:	080058a9 	.word	0x080058a9
 80058d0:	080058a9 	.word	0x080058a9
 80058d4:	080058a9 	.word	0x080058a9
 80058d8:	0800592d 	.word	0x0800592d
 80058dc:	080058a9 	.word	0x080058a9
 80058e0:	080058a9 	.word	0x080058a9
 80058e4:	080058a9 	.word	0x080058a9
 80058e8:	080058a9 	.word	0x080058a9
 80058ec:	08005a39 	.word	0x08005a39
 80058f0:	0800595d 	.word	0x0800595d
 80058f4:	08005a1b 	.word	0x08005a1b
 80058f8:	080058a9 	.word	0x080058a9
 80058fc:	080058a9 	.word	0x080058a9
 8005900:	08005a5b 	.word	0x08005a5b
 8005904:	080058a9 	.word	0x080058a9
 8005908:	0800595d 	.word	0x0800595d
 800590c:	080058a9 	.word	0x080058a9
 8005910:	080058a9 	.word	0x080058a9
 8005914:	08005a23 	.word	0x08005a23
 8005918:	680b      	ldr	r3, [r1, #0]
 800591a:	1d1a      	adds	r2, r3, #4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	600a      	str	r2, [r1, #0]
 8005920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005928:	2301      	movs	r3, #1
 800592a:	e0a3      	b.n	8005a74 <_printf_i+0x1f4>
 800592c:	6825      	ldr	r5, [r4, #0]
 800592e:	6808      	ldr	r0, [r1, #0]
 8005930:	062e      	lsls	r6, r5, #24
 8005932:	f100 0304 	add.w	r3, r0, #4
 8005936:	d50a      	bpl.n	800594e <_printf_i+0xce>
 8005938:	6805      	ldr	r5, [r0, #0]
 800593a:	600b      	str	r3, [r1, #0]
 800593c:	2d00      	cmp	r5, #0
 800593e:	da03      	bge.n	8005948 <_printf_i+0xc8>
 8005940:	232d      	movs	r3, #45	; 0x2d
 8005942:	426d      	negs	r5, r5
 8005944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005948:	485e      	ldr	r0, [pc, #376]	; (8005ac4 <_printf_i+0x244>)
 800594a:	230a      	movs	r3, #10
 800594c:	e019      	b.n	8005982 <_printf_i+0x102>
 800594e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005952:	6805      	ldr	r5, [r0, #0]
 8005954:	600b      	str	r3, [r1, #0]
 8005956:	bf18      	it	ne
 8005958:	b22d      	sxthne	r5, r5
 800595a:	e7ef      	b.n	800593c <_printf_i+0xbc>
 800595c:	680b      	ldr	r3, [r1, #0]
 800595e:	6825      	ldr	r5, [r4, #0]
 8005960:	1d18      	adds	r0, r3, #4
 8005962:	6008      	str	r0, [r1, #0]
 8005964:	0628      	lsls	r0, r5, #24
 8005966:	d501      	bpl.n	800596c <_printf_i+0xec>
 8005968:	681d      	ldr	r5, [r3, #0]
 800596a:	e002      	b.n	8005972 <_printf_i+0xf2>
 800596c:	0669      	lsls	r1, r5, #25
 800596e:	d5fb      	bpl.n	8005968 <_printf_i+0xe8>
 8005970:	881d      	ldrh	r5, [r3, #0]
 8005972:	4854      	ldr	r0, [pc, #336]	; (8005ac4 <_printf_i+0x244>)
 8005974:	2f6f      	cmp	r7, #111	; 0x6f
 8005976:	bf0c      	ite	eq
 8005978:	2308      	moveq	r3, #8
 800597a:	230a      	movne	r3, #10
 800597c:	2100      	movs	r1, #0
 800597e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005982:	6866      	ldr	r6, [r4, #4]
 8005984:	60a6      	str	r6, [r4, #8]
 8005986:	2e00      	cmp	r6, #0
 8005988:	bfa2      	ittt	ge
 800598a:	6821      	ldrge	r1, [r4, #0]
 800598c:	f021 0104 	bicge.w	r1, r1, #4
 8005990:	6021      	strge	r1, [r4, #0]
 8005992:	b90d      	cbnz	r5, 8005998 <_printf_i+0x118>
 8005994:	2e00      	cmp	r6, #0
 8005996:	d04d      	beq.n	8005a34 <_printf_i+0x1b4>
 8005998:	4616      	mov	r6, r2
 800599a:	fbb5 f1f3 	udiv	r1, r5, r3
 800599e:	fb03 5711 	mls	r7, r3, r1, r5
 80059a2:	5dc7      	ldrb	r7, [r0, r7]
 80059a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059a8:	462f      	mov	r7, r5
 80059aa:	42bb      	cmp	r3, r7
 80059ac:	460d      	mov	r5, r1
 80059ae:	d9f4      	bls.n	800599a <_printf_i+0x11a>
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d10b      	bne.n	80059cc <_printf_i+0x14c>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	07df      	lsls	r7, r3, #31
 80059b8:	d508      	bpl.n	80059cc <_printf_i+0x14c>
 80059ba:	6923      	ldr	r3, [r4, #16]
 80059bc:	6861      	ldr	r1, [r4, #4]
 80059be:	4299      	cmp	r1, r3
 80059c0:	bfde      	ittt	le
 80059c2:	2330      	movle	r3, #48	; 0x30
 80059c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059cc:	1b92      	subs	r2, r2, r6
 80059ce:	6122      	str	r2, [r4, #16]
 80059d0:	f8cd a000 	str.w	sl, [sp]
 80059d4:	464b      	mov	r3, r9
 80059d6:	aa03      	add	r2, sp, #12
 80059d8:	4621      	mov	r1, r4
 80059da:	4640      	mov	r0, r8
 80059dc:	f7ff fee2 	bl	80057a4 <_printf_common>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d14c      	bne.n	8005a7e <_printf_i+0x1fe>
 80059e4:	f04f 30ff 	mov.w	r0, #4294967295
 80059e8:	b004      	add	sp, #16
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	4835      	ldr	r0, [pc, #212]	; (8005ac4 <_printf_i+0x244>)
 80059f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	680e      	ldr	r6, [r1, #0]
 80059f8:	061f      	lsls	r7, r3, #24
 80059fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80059fe:	600e      	str	r6, [r1, #0]
 8005a00:	d514      	bpl.n	8005a2c <_printf_i+0x1ac>
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	bf44      	itt	mi
 8005a06:	f043 0320 	orrmi.w	r3, r3, #32
 8005a0a:	6023      	strmi	r3, [r4, #0]
 8005a0c:	b91d      	cbnz	r5, 8005a16 <_printf_i+0x196>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	f023 0320 	bic.w	r3, r3, #32
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	2310      	movs	r3, #16
 8005a18:	e7b0      	b.n	800597c <_printf_i+0xfc>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	f043 0320 	orr.w	r3, r3, #32
 8005a20:	6023      	str	r3, [r4, #0]
 8005a22:	2378      	movs	r3, #120	; 0x78
 8005a24:	4828      	ldr	r0, [pc, #160]	; (8005ac8 <_printf_i+0x248>)
 8005a26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a2a:	e7e3      	b.n	80059f4 <_printf_i+0x174>
 8005a2c:	065e      	lsls	r6, r3, #25
 8005a2e:	bf48      	it	mi
 8005a30:	b2ad      	uxthmi	r5, r5
 8005a32:	e7e6      	b.n	8005a02 <_printf_i+0x182>
 8005a34:	4616      	mov	r6, r2
 8005a36:	e7bb      	b.n	80059b0 <_printf_i+0x130>
 8005a38:	680b      	ldr	r3, [r1, #0]
 8005a3a:	6826      	ldr	r6, [r4, #0]
 8005a3c:	6960      	ldr	r0, [r4, #20]
 8005a3e:	1d1d      	adds	r5, r3, #4
 8005a40:	600d      	str	r5, [r1, #0]
 8005a42:	0635      	lsls	r5, r6, #24
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	d501      	bpl.n	8005a4c <_printf_i+0x1cc>
 8005a48:	6018      	str	r0, [r3, #0]
 8005a4a:	e002      	b.n	8005a52 <_printf_i+0x1d2>
 8005a4c:	0671      	lsls	r1, r6, #25
 8005a4e:	d5fb      	bpl.n	8005a48 <_printf_i+0x1c8>
 8005a50:	8018      	strh	r0, [r3, #0]
 8005a52:	2300      	movs	r3, #0
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	4616      	mov	r6, r2
 8005a58:	e7ba      	b.n	80059d0 <_printf_i+0x150>
 8005a5a:	680b      	ldr	r3, [r1, #0]
 8005a5c:	1d1a      	adds	r2, r3, #4
 8005a5e:	600a      	str	r2, [r1, #0]
 8005a60:	681e      	ldr	r6, [r3, #0]
 8005a62:	6862      	ldr	r2, [r4, #4]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7fa fbba 	bl	80001e0 <memchr>
 8005a6c:	b108      	cbz	r0, 8005a72 <_printf_i+0x1f2>
 8005a6e:	1b80      	subs	r0, r0, r6
 8005a70:	6060      	str	r0, [r4, #4]
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	2300      	movs	r3, #0
 8005a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7c:	e7a8      	b.n	80059d0 <_printf_i+0x150>
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	4632      	mov	r2, r6
 8005a82:	4649      	mov	r1, r9
 8005a84:	4640      	mov	r0, r8
 8005a86:	47d0      	blx	sl
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d0ab      	beq.n	80059e4 <_printf_i+0x164>
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	079b      	lsls	r3, r3, #30
 8005a90:	d413      	bmi.n	8005aba <_printf_i+0x23a>
 8005a92:	68e0      	ldr	r0, [r4, #12]
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	4298      	cmp	r0, r3
 8005a98:	bfb8      	it	lt
 8005a9a:	4618      	movlt	r0, r3
 8005a9c:	e7a4      	b.n	80059e8 <_printf_i+0x168>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	47d0      	blx	sl
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d09b      	beq.n	80059e4 <_printf_i+0x164>
 8005aac:	3501      	adds	r5, #1
 8005aae:	68e3      	ldr	r3, [r4, #12]
 8005ab0:	9903      	ldr	r1, [sp, #12]
 8005ab2:	1a5b      	subs	r3, r3, r1
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	dcf2      	bgt.n	8005a9e <_printf_i+0x21e>
 8005ab8:	e7eb      	b.n	8005a92 <_printf_i+0x212>
 8005aba:	2500      	movs	r5, #0
 8005abc:	f104 0619 	add.w	r6, r4, #25
 8005ac0:	e7f5      	b.n	8005aae <_printf_i+0x22e>
 8005ac2:	bf00      	nop
 8005ac4:	0800621d 	.word	0x0800621d
 8005ac8:	0800622e 	.word	0x0800622e

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	4d06      	ldr	r5, [pc, #24]	; (8005ae8 <_sbrk_r+0x1c>)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fc fb4a 	bl	8002170 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000298 	.word	0x20000298

08005aec <__sread>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	460c      	mov	r4, r1
 8005af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af4:	f000 fab4 	bl	8006060 <_read_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	bfab      	itete	ge
 8005afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005afe:	89a3      	ldrhlt	r3, [r4, #12]
 8005b00:	181b      	addge	r3, r3, r0
 8005b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b06:	bfac      	ite	ge
 8005b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b0a:	81a3      	strhlt	r3, [r4, #12]
 8005b0c:	bd10      	pop	{r4, pc}

08005b0e <__swrite>:
 8005b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	461f      	mov	r7, r3
 8005b14:	898b      	ldrh	r3, [r1, #12]
 8005b16:	05db      	lsls	r3, r3, #23
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	d505      	bpl.n	8005b2c <__swrite+0x1e>
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	2302      	movs	r3, #2
 8005b26:	2200      	movs	r2, #0
 8005b28:	f000 f9c8 	bl	8005ebc <_lseek_r>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	4632      	mov	r2, r6
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b42:	f000 b869 	b.w	8005c18 <_write_r>

08005b46 <__sseek>:
 8005b46:	b510      	push	{r4, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4e:	f000 f9b5 	bl	8005ebc <_lseek_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	bf15      	itete	ne
 8005b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b62:	81a3      	strheq	r3, [r4, #12]
 8005b64:	bf18      	it	ne
 8005b66:	81a3      	strhne	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__sclose>:
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 b8d3 	b.w	8005d18 <_close_r>
	...

08005b74 <__swbuf_r>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	460e      	mov	r6, r1
 8005b78:	4614      	mov	r4, r2
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	b118      	cbz	r0, 8005b86 <__swbuf_r+0x12>
 8005b7e:	6983      	ldr	r3, [r0, #24]
 8005b80:	b90b      	cbnz	r3, 8005b86 <__swbuf_r+0x12>
 8005b82:	f7ff fbbb 	bl	80052fc <__sinit>
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <__swbuf_r+0x98>)
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	d12b      	bne.n	8005be4 <__swbuf_r+0x70>
 8005b8c:	686c      	ldr	r4, [r5, #4]
 8005b8e:	69a3      	ldr	r3, [r4, #24]
 8005b90:	60a3      	str	r3, [r4, #8]
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	071a      	lsls	r2, r3, #28
 8005b96:	d52f      	bpl.n	8005bf8 <__swbuf_r+0x84>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	b36b      	cbz	r3, 8005bf8 <__swbuf_r+0x84>
 8005b9c:	6923      	ldr	r3, [r4, #16]
 8005b9e:	6820      	ldr	r0, [r4, #0]
 8005ba0:	1ac0      	subs	r0, r0, r3
 8005ba2:	6963      	ldr	r3, [r4, #20]
 8005ba4:	b2f6      	uxtb	r6, r6
 8005ba6:	4283      	cmp	r3, r0
 8005ba8:	4637      	mov	r7, r6
 8005baa:	dc04      	bgt.n	8005bb6 <__swbuf_r+0x42>
 8005bac:	4621      	mov	r1, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f948 	bl	8005e44 <_fflush_r>
 8005bb4:	bb30      	cbnz	r0, 8005c04 <__swbuf_r+0x90>
 8005bb6:	68a3      	ldr	r3, [r4, #8]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	6022      	str	r2, [r4, #0]
 8005bc2:	701e      	strb	r6, [r3, #0]
 8005bc4:	6963      	ldr	r3, [r4, #20]
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	4283      	cmp	r3, r0
 8005bca:	d004      	beq.n	8005bd6 <__swbuf_r+0x62>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	07db      	lsls	r3, r3, #31
 8005bd0:	d506      	bpl.n	8005be0 <__swbuf_r+0x6c>
 8005bd2:	2e0a      	cmp	r6, #10
 8005bd4:	d104      	bne.n	8005be0 <__swbuf_r+0x6c>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 f933 	bl	8005e44 <_fflush_r>
 8005bde:	b988      	cbnz	r0, 8005c04 <__swbuf_r+0x90>
 8005be0:	4638      	mov	r0, r7
 8005be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <__swbuf_r+0x9c>)
 8005be6:	429c      	cmp	r4, r3
 8005be8:	d101      	bne.n	8005bee <__swbuf_r+0x7a>
 8005bea:	68ac      	ldr	r4, [r5, #8]
 8005bec:	e7cf      	b.n	8005b8e <__swbuf_r+0x1a>
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <__swbuf_r+0xa0>)
 8005bf0:	429c      	cmp	r4, r3
 8005bf2:	bf08      	it	eq
 8005bf4:	68ec      	ldreq	r4, [r5, #12]
 8005bf6:	e7ca      	b.n	8005b8e <__swbuf_r+0x1a>
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	f000 f81e 	bl	8005c3c <__swsetup_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d0cb      	beq.n	8005b9c <__swbuf_r+0x28>
 8005c04:	f04f 37ff 	mov.w	r7, #4294967295
 8005c08:	e7ea      	b.n	8005be0 <__swbuf_r+0x6c>
 8005c0a:	bf00      	nop
 8005c0c:	080061cc 	.word	0x080061cc
 8005c10:	080061ec 	.word	0x080061ec
 8005c14:	080061ac 	.word	0x080061ac

08005c18 <_write_r>:
 8005c18:	b538      	push	{r3, r4, r5, lr}
 8005c1a:	4d07      	ldr	r5, [pc, #28]	; (8005c38 <_write_r+0x20>)
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	4608      	mov	r0, r1
 8005c20:	4611      	mov	r1, r2
 8005c22:	2200      	movs	r2, #0
 8005c24:	602a      	str	r2, [r5, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f7fc f89c 	bl	8001d64 <_write>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_write_r+0x1e>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_write_r+0x1e>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	20000298 	.word	0x20000298

08005c3c <__swsetup_r>:
 8005c3c:	4b32      	ldr	r3, [pc, #200]	; (8005d08 <__swsetup_r+0xcc>)
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	681d      	ldr	r5, [r3, #0]
 8005c42:	4606      	mov	r6, r0
 8005c44:	460c      	mov	r4, r1
 8005c46:	b125      	cbz	r5, 8005c52 <__swsetup_r+0x16>
 8005c48:	69ab      	ldr	r3, [r5, #24]
 8005c4a:	b913      	cbnz	r3, 8005c52 <__swsetup_r+0x16>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff fb55 	bl	80052fc <__sinit>
 8005c52:	4b2e      	ldr	r3, [pc, #184]	; (8005d0c <__swsetup_r+0xd0>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	d10f      	bne.n	8005c78 <__swsetup_r+0x3c>
 8005c58:	686c      	ldr	r4, [r5, #4]
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c60:	0719      	lsls	r1, r3, #28
 8005c62:	d42c      	bmi.n	8005cbe <__swsetup_r+0x82>
 8005c64:	06dd      	lsls	r5, r3, #27
 8005c66:	d411      	bmi.n	8005c8c <__swsetup_r+0x50>
 8005c68:	2309      	movs	r3, #9
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	e03e      	b.n	8005cf6 <__swsetup_r+0xba>
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <__swsetup_r+0xd4>)
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	d101      	bne.n	8005c82 <__swsetup_r+0x46>
 8005c7e:	68ac      	ldr	r4, [r5, #8]
 8005c80:	e7eb      	b.n	8005c5a <__swsetup_r+0x1e>
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <__swsetup_r+0xd8>)
 8005c84:	429c      	cmp	r4, r3
 8005c86:	bf08      	it	eq
 8005c88:	68ec      	ldreq	r4, [r5, #12]
 8005c8a:	e7e6      	b.n	8005c5a <__swsetup_r+0x1e>
 8005c8c:	0758      	lsls	r0, r3, #29
 8005c8e:	d512      	bpl.n	8005cb6 <__swsetup_r+0x7a>
 8005c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c92:	b141      	cbz	r1, 8005ca6 <__swsetup_r+0x6a>
 8005c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	d002      	beq.n	8005ca2 <__swsetup_r+0x66>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 f98f 	bl	8005fc0 <_free_r>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca6:	89a3      	ldrh	r3, [r4, #12]
 8005ca8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cac:	81a3      	strh	r3, [r4, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	b94b      	cbnz	r3, 8005cd6 <__swsetup_r+0x9a>
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ccc:	d003      	beq.n	8005cd6 <__swsetup_r+0x9a>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f000 f929 	bl	8005f28 <__smakebuf_r>
 8005cd6:	89a0      	ldrh	r0, [r4, #12]
 8005cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cdc:	f010 0301 	ands.w	r3, r0, #1
 8005ce0:	d00a      	beq.n	8005cf8 <__swsetup_r+0xbc>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	6963      	ldr	r3, [r4, #20]
 8005ce8:	425b      	negs	r3, r3
 8005cea:	61a3      	str	r3, [r4, #24]
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	b943      	cbnz	r3, 8005d02 <__swsetup_r+0xc6>
 8005cf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cf4:	d1ba      	bne.n	8005c6c <__swsetup_r+0x30>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	0781      	lsls	r1, r0, #30
 8005cfa:	bf58      	it	pl
 8005cfc:	6963      	ldrpl	r3, [r4, #20]
 8005cfe:	60a3      	str	r3, [r4, #8]
 8005d00:	e7f4      	b.n	8005cec <__swsetup_r+0xb0>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e7f7      	b.n	8005cf6 <__swsetup_r+0xba>
 8005d06:	bf00      	nop
 8005d08:	20000058 	.word	0x20000058
 8005d0c:	080061cc 	.word	0x080061cc
 8005d10:	080061ec 	.word	0x080061ec
 8005d14:	080061ac 	.word	0x080061ac

08005d18 <_close_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	; (8005d34 <_close_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fc f9ef 	bl	8002106 <_close>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_close_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_close_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	20000298 	.word	0x20000298

08005d38 <__sflush_r>:
 8005d38:	898a      	ldrh	r2, [r1, #12]
 8005d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3e:	4605      	mov	r5, r0
 8005d40:	0710      	lsls	r0, r2, #28
 8005d42:	460c      	mov	r4, r1
 8005d44:	d458      	bmi.n	8005df8 <__sflush_r+0xc0>
 8005d46:	684b      	ldr	r3, [r1, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dc05      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dc02      	bgt.n	8005d58 <__sflush_r+0x20>
 8005d52:	2000      	movs	r0, #0
 8005d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d0f9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d64:	682f      	ldr	r7, [r5, #0]
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	d032      	beq.n	8005dd0 <__sflush_r+0x98>
 8005d6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	075a      	lsls	r2, r3, #29
 8005d70:	d505      	bpl.n	8005d7e <__sflush_r+0x46>
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	1ac0      	subs	r0, r0, r3
 8005d76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d78:	b10b      	cbz	r3, 8005d7e <__sflush_r+0x46>
 8005d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d7c:	1ac0      	subs	r0, r0, r3
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4602      	mov	r2, r0
 8005d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d84:	6a21      	ldr	r1, [r4, #32]
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b0      	blx	r6
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	d106      	bne.n	8005d9e <__sflush_r+0x66>
 8005d90:	6829      	ldr	r1, [r5, #0]
 8005d92:	291d      	cmp	r1, #29
 8005d94:	d82c      	bhi.n	8005df0 <__sflush_r+0xb8>
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <__sflush_r+0x108>)
 8005d98:	40ca      	lsrs	r2, r1
 8005d9a:	07d6      	lsls	r6, r2, #31
 8005d9c:	d528      	bpl.n	8005df0 <__sflush_r+0xb8>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	6062      	str	r2, [r4, #4]
 8005da2:	04d9      	lsls	r1, r3, #19
 8005da4:	6922      	ldr	r2, [r4, #16]
 8005da6:	6022      	str	r2, [r4, #0]
 8005da8:	d504      	bpl.n	8005db4 <__sflush_r+0x7c>
 8005daa:	1c42      	adds	r2, r0, #1
 8005dac:	d101      	bne.n	8005db2 <__sflush_r+0x7a>
 8005dae:	682b      	ldr	r3, [r5, #0]
 8005db0:	b903      	cbnz	r3, 8005db4 <__sflush_r+0x7c>
 8005db2:	6560      	str	r0, [r4, #84]	; 0x54
 8005db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db6:	602f      	str	r7, [r5, #0]
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d0ca      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dc0:	4299      	cmp	r1, r3
 8005dc2:	d002      	beq.n	8005dca <__sflush_r+0x92>
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f000 f8fb 	bl	8005fc0 <_free_r>
 8005dca:	2000      	movs	r0, #0
 8005dcc:	6360      	str	r0, [r4, #52]	; 0x34
 8005dce:	e7c1      	b.n	8005d54 <__sflush_r+0x1c>
 8005dd0:	6a21      	ldr	r1, [r4, #32]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	47b0      	blx	r6
 8005dd8:	1c41      	adds	r1, r0, #1
 8005dda:	d1c7      	bne.n	8005d6c <__sflush_r+0x34>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0c4      	beq.n	8005d6c <__sflush_r+0x34>
 8005de2:	2b1d      	cmp	r3, #29
 8005de4:	d001      	beq.n	8005dea <__sflush_r+0xb2>
 8005de6:	2b16      	cmp	r3, #22
 8005de8:	d101      	bne.n	8005dee <__sflush_r+0xb6>
 8005dea:	602f      	str	r7, [r5, #0]
 8005dec:	e7b1      	b.n	8005d52 <__sflush_r+0x1a>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	e7ad      	b.n	8005d54 <__sflush_r+0x1c>
 8005df8:	690f      	ldr	r7, [r1, #16]
 8005dfa:	2f00      	cmp	r7, #0
 8005dfc:	d0a9      	beq.n	8005d52 <__sflush_r+0x1a>
 8005dfe:	0793      	lsls	r3, r2, #30
 8005e00:	680e      	ldr	r6, [r1, #0]
 8005e02:	bf08      	it	eq
 8005e04:	694b      	ldreq	r3, [r1, #20]
 8005e06:	600f      	str	r7, [r1, #0]
 8005e08:	bf18      	it	ne
 8005e0a:	2300      	movne	r3, #0
 8005e0c:	eba6 0807 	sub.w	r8, r6, r7
 8005e10:	608b      	str	r3, [r1, #8]
 8005e12:	f1b8 0f00 	cmp.w	r8, #0
 8005e16:	dd9c      	ble.n	8005d52 <__sflush_r+0x1a>
 8005e18:	6a21      	ldr	r1, [r4, #32]
 8005e1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e1c:	4643      	mov	r3, r8
 8005e1e:	463a      	mov	r2, r7
 8005e20:	4628      	mov	r0, r5
 8005e22:	47b0      	blx	r6
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dc06      	bgt.n	8005e36 <__sflush_r+0xfe>
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	e78e      	b.n	8005d54 <__sflush_r+0x1c>
 8005e36:	4407      	add	r7, r0
 8005e38:	eba8 0800 	sub.w	r8, r8, r0
 8005e3c:	e7e9      	b.n	8005e12 <__sflush_r+0xda>
 8005e3e:	bf00      	nop
 8005e40:	20400001 	.word	0x20400001

08005e44 <_fflush_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	4605      	mov	r5, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	b913      	cbnz	r3, 8005e54 <_fflush_r+0x10>
 8005e4e:	2500      	movs	r5, #0
 8005e50:	4628      	mov	r0, r5
 8005e52:	bd38      	pop	{r3, r4, r5, pc}
 8005e54:	b118      	cbz	r0, 8005e5e <_fflush_r+0x1a>
 8005e56:	6983      	ldr	r3, [r0, #24]
 8005e58:	b90b      	cbnz	r3, 8005e5e <_fflush_r+0x1a>
 8005e5a:	f7ff fa4f 	bl	80052fc <__sinit>
 8005e5e:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <_fflush_r+0x6c>)
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d11b      	bne.n	8005e9c <_fflush_r+0x58>
 8005e64:	686c      	ldr	r4, [r5, #4]
 8005e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ef      	beq.n	8005e4e <_fflush_r+0xa>
 8005e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e70:	07d0      	lsls	r0, r2, #31
 8005e72:	d404      	bmi.n	8005e7e <_fflush_r+0x3a>
 8005e74:	0599      	lsls	r1, r3, #22
 8005e76:	d402      	bmi.n	8005e7e <_fflush_r+0x3a>
 8005e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e7a:	f7ff fadd 	bl	8005438 <__retarget_lock_acquire_recursive>
 8005e7e:	4628      	mov	r0, r5
 8005e80:	4621      	mov	r1, r4
 8005e82:	f7ff ff59 	bl	8005d38 <__sflush_r>
 8005e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e88:	07da      	lsls	r2, r3, #31
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	d4e0      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	059b      	lsls	r3, r3, #22
 8005e92:	d4dd      	bmi.n	8005e50 <_fflush_r+0xc>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f7ff fad0 	bl	800543a <__retarget_lock_release_recursive>
 8005e9a:	e7d9      	b.n	8005e50 <_fflush_r+0xc>
 8005e9c:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <_fflush_r+0x70>)
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d101      	bne.n	8005ea6 <_fflush_r+0x62>
 8005ea2:	68ac      	ldr	r4, [r5, #8]
 8005ea4:	e7df      	b.n	8005e66 <_fflush_r+0x22>
 8005ea6:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <_fflush_r+0x74>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	bf08      	it	eq
 8005eac:	68ec      	ldreq	r4, [r5, #12]
 8005eae:	e7da      	b.n	8005e66 <_fflush_r+0x22>
 8005eb0:	080061cc 	.word	0x080061cc
 8005eb4:	080061ec 	.word	0x080061ec
 8005eb8:	080061ac 	.word	0x080061ac

08005ebc <_lseek_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4d07      	ldr	r5, [pc, #28]	; (8005edc <_lseek_r+0x20>)
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	602a      	str	r2, [r5, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f7fc f942 	bl	8002154 <_lseek>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_lseek_r+0x1e>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_lseek_r+0x1e>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000298 	.word	0x20000298

08005ee0 <__swhatbuf_r>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	460e      	mov	r6, r1
 8005ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	b096      	sub	sp, #88	; 0x58
 8005eec:	4614      	mov	r4, r2
 8005eee:	461d      	mov	r5, r3
 8005ef0:	da07      	bge.n	8005f02 <__swhatbuf_r+0x22>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	602b      	str	r3, [r5, #0]
 8005ef6:	89b3      	ldrh	r3, [r6, #12]
 8005ef8:	061a      	lsls	r2, r3, #24
 8005efa:	d410      	bmi.n	8005f1e <__swhatbuf_r+0x3e>
 8005efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f00:	e00e      	b.n	8005f20 <__swhatbuf_r+0x40>
 8005f02:	466a      	mov	r2, sp
 8005f04:	f000 f8be 	bl	8006084 <_fstat_r>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	dbf2      	blt.n	8005ef2 <__swhatbuf_r+0x12>
 8005f0c:	9a01      	ldr	r2, [sp, #4]
 8005f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f16:	425a      	negs	r2, r3
 8005f18:	415a      	adcs	r2, r3
 8005f1a:	602a      	str	r2, [r5, #0]
 8005f1c:	e7ee      	b.n	8005efc <__swhatbuf_r+0x1c>
 8005f1e:	2340      	movs	r3, #64	; 0x40
 8005f20:	2000      	movs	r0, #0
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	b016      	add	sp, #88	; 0x58
 8005f26:	bd70      	pop	{r4, r5, r6, pc}

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b002      	add	sp, #8
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffca 	bl	8005ee0 <__swhatbuf_r>
 8005f4c:	9900      	ldr	r1, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fa73 	bl	800543c <_malloc_r>
 8005f56:	b948      	cbnz	r0, 8005f6c <__smakebuf_r+0x44>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d4ef      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7e3      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <__smakebuf_r+0x7c>)
 8005f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x74>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f88d 	bl	80060a8 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x74>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a0      	ldrh	r0, [r4, #12]
 8005f9e:	4305      	orrs	r5, r0
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cd      	b.n	8005f40 <__smakebuf_r+0x18>
 8005fa4:	08005295 	.word	0x08005295

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff ba45 	b.w	8005438 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000290 	.word	0x20000290

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff ba40 	b.w	800543a <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000290 	.word	0x20000290

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d048      	beq.n	8006058 <_free_r+0x98>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f7ff ffe7 	bl	8005fa8 <__malloc_lock>
 8005fda:	4a20      	ldr	r2, [pc, #128]	; (800605c <_free_r+0x9c>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	b933      	cbnz	r3, 8005ff2 <_free_r+0x32>
 8005fe4:	6063      	str	r3, [r4, #4]
 8005fe6:	6014      	str	r4, [r2, #0]
 8005fe8:	b003      	add	sp, #12
 8005fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fee:	f7ff bfe1 	b.w	8005fb4 <__malloc_unlock>
 8005ff2:	42a3      	cmp	r3, r4
 8005ff4:	d90b      	bls.n	800600e <_free_r+0x4e>
 8005ff6:	6821      	ldr	r1, [r4, #0]
 8005ff8:	1862      	adds	r2, r4, r1
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	bf04      	itt	eq
 8005ffe:	681a      	ldreq	r2, [r3, #0]
 8006000:	685b      	ldreq	r3, [r3, #4]
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	bf04      	itt	eq
 8006006:	1852      	addeq	r2, r2, r1
 8006008:	6022      	streq	r2, [r4, #0]
 800600a:	602c      	str	r4, [r5, #0]
 800600c:	e7ec      	b.n	8005fe8 <_free_r+0x28>
 800600e:	461a      	mov	r2, r3
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b10b      	cbz	r3, 8006018 <_free_r+0x58>
 8006014:	42a3      	cmp	r3, r4
 8006016:	d9fa      	bls.n	800600e <_free_r+0x4e>
 8006018:	6811      	ldr	r1, [r2, #0]
 800601a:	1855      	adds	r5, r2, r1
 800601c:	42a5      	cmp	r5, r4
 800601e:	d10b      	bne.n	8006038 <_free_r+0x78>
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	4421      	add	r1, r4
 8006024:	1854      	adds	r4, r2, r1
 8006026:	42a3      	cmp	r3, r4
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	d1dd      	bne.n	8005fe8 <_free_r+0x28>
 800602c:	681c      	ldr	r4, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	6053      	str	r3, [r2, #4]
 8006032:	4421      	add	r1, r4
 8006034:	6011      	str	r1, [r2, #0]
 8006036:	e7d7      	b.n	8005fe8 <_free_r+0x28>
 8006038:	d902      	bls.n	8006040 <_free_r+0x80>
 800603a:	230c      	movs	r3, #12
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	e7d3      	b.n	8005fe8 <_free_r+0x28>
 8006040:	6825      	ldr	r5, [r4, #0]
 8006042:	1961      	adds	r1, r4, r5
 8006044:	428b      	cmp	r3, r1
 8006046:	bf04      	itt	eq
 8006048:	6819      	ldreq	r1, [r3, #0]
 800604a:	685b      	ldreq	r3, [r3, #4]
 800604c:	6063      	str	r3, [r4, #4]
 800604e:	bf04      	itt	eq
 8006050:	1949      	addeq	r1, r1, r5
 8006052:	6021      	streq	r1, [r4, #0]
 8006054:	6054      	str	r4, [r2, #4]
 8006056:	e7c7      	b.n	8005fe8 <_free_r+0x28>
 8006058:	b003      	add	sp, #12
 800605a:	bd30      	pop	{r4, r5, pc}
 800605c:	20000104 	.word	0x20000104

08006060 <_read_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	; (8006080 <_read_r+0x20>)
 8006064:	4604      	mov	r4, r0
 8006066:	4608      	mov	r0, r1
 8006068:	4611      	mov	r1, r2
 800606a:	2200      	movs	r2, #0
 800606c:	602a      	str	r2, [r5, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f7fc f82c 	bl	80020cc <_read>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_read_r+0x1e>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_read_r+0x1e>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000298 	.word	0x20000298

08006084 <_fstat_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4d07      	ldr	r5, [pc, #28]	; (80060a4 <_fstat_r+0x20>)
 8006088:	2300      	movs	r3, #0
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	4611      	mov	r1, r2
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	f7fc f844 	bl	800211e <_fstat>
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d102      	bne.n	80060a0 <_fstat_r+0x1c>
 800609a:	682b      	ldr	r3, [r5, #0]
 800609c:	b103      	cbz	r3, 80060a0 <_fstat_r+0x1c>
 800609e:	6023      	str	r3, [r4, #0]
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	bf00      	nop
 80060a4:	20000298 	.word	0x20000298

080060a8 <_isatty_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d06      	ldr	r5, [pc, #24]	; (80060c4 <_isatty_r+0x1c>)
 80060ac:	2300      	movs	r3, #0
 80060ae:	4604      	mov	r4, r0
 80060b0:	4608      	mov	r0, r1
 80060b2:	602b      	str	r3, [r5, #0]
 80060b4:	f7fc f843 	bl	800213e <_isatty>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_isatty_r+0x1a>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_isatty_r+0x1a>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000298 	.word	0x20000298

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
